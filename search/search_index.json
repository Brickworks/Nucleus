{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nucleus This is the documentation homepage for Nucleus, Mission 1 of the Brickworks Project. The documentation here logs our ideas, designs, and decisions through the design process from concept selection to post-flight analysis. Want to help? For more information on how to contribute to Nucleus or join the Brickworks team, see the Contribute page. GitHub : github.com/Brickworks/Nucleus Confluence : brickworks.atlassian.net What is Brickworks? Brickworks is a group of engineers who are passionate about aerospace. The group formed in November 2018 as an outlet for alumni members of the student-faculty research group RIT Space Exploration (SPEX) to continue doing space-related engineering projects. Brickworks's mission is to do novel things with accesible hardware, share the knowledge gained along the way, and set an example of excellence for similar hobby projects. Why a High Altitude Balloon? High Altitude Balloons (HABs) are low-cost, low-risk vehicles that are the perfect platform for conducting small scale atmospheric studies, remote sensing, and other experiments that make use of the \"edge of space\" conditions found at altitudes in excess of 65,000 feet above sea level. Atmospheric conditions in the stratosphere are fairly well understood insofar as the humidity, temperatures, and pressures that must be weathered by a flight platform. More specifically, ambient temperatures and pressures between 65,000--100,000, feet altitude see extremes of -60C and 0.05 atm respectively. HABs are an excellent platform to experiment with and learn aerospace engineering skills and techniques as a hobbyist without the prohibitively high capital requirements of building a spacecraft. This means engineers can also experiment with more novel ideas or gain experience on a risk-tolerant and short-turnaround project. What is Nucleus? Nucleus is a high altitude balloon technology demonstration mission. The key objectives of this mission are to develop a robust avionics architecture, experiment with core technologies which enable long duration flights, broadcast telemetry to a remote ground terminal, and optionally collect high quality images from high altitudes. As a technology demonstrator, Nucleus flight systems are designed with the intent to be improved or expanded upon in future missions.","title":"Introduction"},{"location":"#nucleus","text":"This is the documentation homepage for Nucleus, Mission 1 of the Brickworks Project. The documentation here logs our ideas, designs, and decisions through the design process from concept selection to post-flight analysis. Want to help? For more information on how to contribute to Nucleus or join the Brickworks team, see the Contribute page. GitHub : github.com/Brickworks/Nucleus Confluence : brickworks.atlassian.net","title":"Nucleus"},{"location":"#what-is-brickworks","text":"Brickworks is a group of engineers who are passionate about aerospace. The group formed in November 2018 as an outlet for alumni members of the student-faculty research group RIT Space Exploration (SPEX) to continue doing space-related engineering projects. Brickworks's mission is to do novel things with accesible hardware, share the knowledge gained along the way, and set an example of excellence for similar hobby projects.","title":"What is Brickworks?"},{"location":"#why-a-high-altitude-balloon","text":"High Altitude Balloons (HABs) are low-cost, low-risk vehicles that are the perfect platform for conducting small scale atmospheric studies, remote sensing, and other experiments that make use of the \"edge of space\" conditions found at altitudes in excess of 65,000 feet above sea level. Atmospheric conditions in the stratosphere are fairly well understood insofar as the humidity, temperatures, and pressures that must be weathered by a flight platform. More specifically, ambient temperatures and pressures between 65,000--100,000, feet altitude see extremes of -60C and 0.05 atm respectively. HABs are an excellent platform to experiment with and learn aerospace engineering skills and techniques as a hobbyist without the prohibitively high capital requirements of building a spacecraft. This means engineers can also experiment with more novel ideas or gain experience on a risk-tolerant and short-turnaround project.","title":"Why a High Altitude Balloon?"},{"location":"#what-is-nucleus","text":"Nucleus is a high altitude balloon technology demonstration mission. The key objectives of this mission are to develop a robust avionics architecture, experiment with core technologies which enable long duration flights, broadcast telemetry to a remote ground terminal, and optionally collect high quality images from high altitudes. As a technology demonstrator, Nucleus flight systems are designed with the intent to be improved or expanded upon in future missions.","title":"What is Nucleus?"},{"location":"contribute/","text":"Contribute Contact us! Chat with the team on the RIT SPEX Slack in the #alumni-hab channel. Follow development To track tasks and log progress, we've set up a JIRA for this project . Submit your designs Nucleus is an open source project. All of the source code and documentation is hosted on the Nucleus GitHub repository . Submit your contributions as a pull request to this repository! Adding to documentation Nucleus documentation is powered by MkDocs , the backend that builds markdown files into a beautiful website. Whenever changes to get pushed to main , MkDocs is run via GitHub Actions and serves the result at brickworks.github.io/Nucleus/ . Formatting Edit the docs as Markdown files, then use mkdocs serve to preview them in your browser. In addition to all GitHub flavor markdown, admonitions and footnotes are also allowed. Even more extensions are available for MkDocs, just add them to the mkdocs.yml to use them. Adding new pages To add a new page to the documentation, create a new .md file and place it under the docs/ directory. Add the page as a new item in the navigation bar by adding a new key to the mkdocs.yml under nav , where the key is how it will show up in the navigation bar and the value is the path to the corresponding markdown file. nav: - My New Page Title: my_new_page.md Other nested navigation bar items are generated from headings inside the file. Building the documentation locally Install MkDocs to your machine or virtual environment. pip install mkdocs Then start a server on localhost . This builds the documentation and serves the site locally. This server updates live when edits are made to the docs files, so you don't need to close or restart the server when editing. mkdocs serve Alternatively, just build the site files. mkdocs build For more help and options, refer to the mkdocs CLI help text. mkdocs -h","title":"Contribute"},{"location":"contribute/#contribute","text":"","title":"Contribute"},{"location":"contribute/#contact-us","text":"Chat with the team on the RIT SPEX Slack in the #alumni-hab channel.","title":"Contact us!"},{"location":"contribute/#follow-development","text":"To track tasks and log progress, we've set up a JIRA for this project .","title":"Follow development"},{"location":"contribute/#submit-your-designs","text":"Nucleus is an open source project. All of the source code and documentation is hosted on the Nucleus GitHub repository . Submit your contributions as a pull request to this repository!","title":"Submit your designs"},{"location":"contribute/#adding-to-documentation","text":"Nucleus documentation is powered by MkDocs , the backend that builds markdown files into a beautiful website. Whenever changes to get pushed to main , MkDocs is run via GitHub Actions and serves the result at brickworks.github.io/Nucleus/ .","title":"Adding to documentation"},{"location":"contribute/#formatting","text":"Edit the docs as Markdown files, then use mkdocs serve to preview them in your browser. In addition to all GitHub flavor markdown, admonitions and footnotes are also allowed. Even more extensions are available for MkDocs, just add them to the mkdocs.yml to use them.","title":"Formatting"},{"location":"contribute/#adding-new-pages","text":"To add a new page to the documentation, create a new .md file and place it under the docs/ directory. Add the page as a new item in the navigation bar by adding a new key to the mkdocs.yml under nav , where the key is how it will show up in the navigation bar and the value is the path to the corresponding markdown file. nav: - My New Page Title: my_new_page.md Other nested navigation bar items are generated from headings inside the file.","title":"Adding new pages"},{"location":"contribute/#building-the-documentation-locally","text":"Install MkDocs to your machine or virtual environment. pip install mkdocs Then start a server on localhost . This builds the documentation and serves the site locally. This server updates live when edits are made to the docs files, so you don't need to close or restart the server when editing. mkdocs serve Alternatively, just build the site files. mkdocs build For more help and options, refer to the mkdocs CLI help text. mkdocs -h","title":"Building the documentation locally"},{"location":"flight_altctrl_conops/","text":"Altitude Control System Actively control the weight and buoyancy of the HAB in order to maintain equilibrium at a prescribed altitude for as long as resources allow. Approach Normally the balloon is filled with lifting gas so that it rises with the payload until it reaches an altitude where the ambient temperature and pressure cause the balloon to expand beyond its limits and it bursts. Without active control, flight time can be increased by filling the balloon with just enough lift gas to be at equilibrium at the target altitude, but this is difficult for several reasons: The actual temperature and pressure at the target altitude are at best roughly approximated by models, even when accounting for the latest weather forecast. Temperature and pressure are not constant at the target altitude, so even if there was a perfectly measured amount of lift gas to be at equilibrium for a specific temperature and pressure band, it wouldn\u2019t follow a target altitude. Filling the balloon with less gas would mean it takes longer for the HAB to reach the target altitude. The HAB\u2019s altitude is a function of two opposing forces: the upward buoyancy force and the weight of the balloon-payload system. Critically, both are directly influenced by something we can control. Buoyancy is a function of the amount of lift gas in the balloon, and weight is a function of the mass of the payload. Thus we can design a closed-loop control algorithm to change the balance of these two forces by bleeding lift gas from the balloon or dropping ballast mass from the payload based on the measured altitude in order to converge to some target altitude. This addresses a number of issues encountered with passive flight: Dynamic feedback control allows the balloon to maintain equilibrium at a target altitude through changing temperatures and pressures. Open-loop control of lifting gas allows the balloon to be overfilled at launch, rising to the target altitude quickly and then bleeding gas from the balloon until equilibrium is achieved. In order for the controller to converge to a geometric altitude, it must use a non-atmospheric reference like GPS altitude. Barometric altimeters measure pressure, which is calibrated to isobaric layers of a standard reference atmosphere. Primary mode: GPS altitude hold. Secondary mode: Isobaric altitude hold. ConOps Wait for a controller enable to be sent. Disarm the controller when the avionics boot up. During pre-launch, operators enable the controller. Disarm the controller unless when all of the following conditions are met: A controller enable command has been received since the last boot or the last controller disable command. The control error has crossed zero at least once ( i.e. , the HAB\u2019s altitude has risen above the target altitude at least once). There is ballast mass remaining in the reservoir. Calibrate the mass flow rate at the ballast release valve prior to flight and keep a tally of remaining ballast mass. There is enough lifting gas in the balloon for the HAB to rise if the reservoir were empty. Use a pressure sensor in the balloon to compute the mass flow rate at the bleed valve from the gauge pressure and temperature of lifting gas inside the balloon and keep a tally of remaining lifting gas. Use a tuned PI control to drive a ballast release valve and a gas bleed valve. The controller is designed for disturbance rejection of a noisy altitude signal. 1. In order to conserve control effort, we must tune the controller such that overshoot and oscillations are minimized. Response time and settling time should be tuned to be small compared to flight time, but can still be on the order of ~1 hour. Control loop PWM frequency is tuned to be much faster than the response time. Enter stabilize control mode when the controller is armed and remain in this mode until ascent rate and/or altitude error are greater than the allowable bounds. GPS altitude hold (Stabilize) Use GPS altitude to converge to a geometric altitude that may cross isobaric layer boundaries. This control mode uses more control mass than barometric altitude hold so it should not be used for extended periods of time. Use this control mode during the stabilize phase to quickly approach the target altitude. If the GPS module cannot obtain a solid lock, fall back to barometric altitude for this phase. Once the vehicle is near the target altitude and has reached a steady state, transition to cruise mode to maintain an altitude near the target for an extended period of time. Barometric altitude hold (Cruise) Use barometric altitude to equalize to an isobaric layer of the atmosphere corresponding to a calibrated approximate altitude. This control mode uses less control mass because it is able to equalize the balloon pressure to ambient pressure and \u201cride\u201d isobaric layers of atmosphere. Hold an isobaric altitude during the cruise phase in order to conserve control mass. If the controller is still armed and the altitude error exceeds the allowable range, transition from cruise to stabilize and then repeat this algorithm until the controller is disarmed. When the controller is disarmed, dump all remaining ballast. Lock the ballast valve in the open position. Lock the bleed valve in the closed position. To Do: Describe in greater detail the \u201clockout\u201d conditions, how delay criteria work (do not act until accumulated steady state error is above threshold), how actuation commands are structured (PWM with actuation duration, where 0 or -1 duration means do nothing) PID Control In order to dynamically determine how much to bleed or ballast, we implement a PID controller to determine the percentage of time of each control cycle to keep the bleed or ballast valve open. This is also referred to as PWM control with a PID algorithm. The PID control algorithm works by modulating the inputs, u , to the Plant , which in our case means the bleed and ballast controls. The Plant is the physical response, so the balance of weight, buoyancy, and drag forces with the given mass properties and ambient conditions. (See https://brickworks.atlassian.net/wiki/spaces/HT/pages/63799297/Simple+Atmospheric+Flight+Model#Sum-of-Forces-%2F-Net-Force ) The output of the Plant is the actual altitude, y . For a given set point altitude, r , the PID controller attempts to reduce the error, e=r-y , to zero. The PID controller consists of a set of gains applied to a proportional term, an integral term, and a derivative term that all operate on the error signal, e . These gains are tuned to get the desired response from the controller. Rules of thumb Proportional gain : How aggressively signal approaches setpoint. Too much causes overshoot. No impact on steady-state error. Integral gain : How much error matters over time. Reduces oscillations and steady-state errors. Prone to windup , where accumulated errors over a long time cause lag in the controller after it reaches the desired point. Derivative gain : How much rate of change matters. Reduces overshoot. Prone to oscillations. Noisy signals make it go crazy, but this can be mitigated by adding a lowpass filter. References BYU Dynamics and Control by John D. Hedengren Control Tutorials for Matlab & Simulink PID Control Design by A.B. Campo Wikipedia - PID Controller , Wikipedia - Integral Windup The Basics of Tuning PID Loops Tunable Parameters To achieve the desired behavior from the controller, we tune some of the parameters in software and tune other parameters as part of choosing or sizing elements of the system during the design process. Pure Tunables I call the parameters that we can choose and change \u201cfor free\u201d pure tunables , since tuning these values can be done as desired without extra engineering work. Target altitude Controller dead zone (allowable steady state error) Control loop cycle time (compute) Control loop cycle time (actuation PWM) Sensor measurement sample time Lowpass filter gain PID controller gains (which determine response time and percent overshoot) Initial ballast mass Initial lift gas mass Lift gas reserve fraction (fraction of total mass of lift gas allocated for altitude control) Arm / disarm criteria Calibrated Tunables Calibrated tunables are what I call parameters that affect the controller\u2019s behavior or system response but can\u2019t be dialed in on a whim. These are things that require extra engineering or design changes to tune. We choose ideal values for these parameters during the design process, and then we measure the true values when the system is built. Ballast mass flow rate Bleed mass flow rate Actuator and component dry mass Maximum control loop cycle time (compute) Maximum control loop cycle time (actuation PWM) Maximum sensor measurement sample time Maximum lift gas reserve fraction Avionics The altitude control flight software application ( https://brickworks.atlassian.net/wiki/spaces/NUCLEUS/pages/106692609/Main+Flight+Computer+Software+Design#Altitude-Controller ) issues commands to open the ballast or bleed valves over the CAN bus. When a bleed or ballast command is received by the altitude control interface board ( Altitude Control/Dynamics Sensor Card ) over CAN, it executes the corresponding subroutine to carry out the command. The software environment onboard the altitude control interface board ( Altitude Control/Dynamics Card Software Design ) includes drivers for the hardware interfaces, such as a PWM motor controller for the valve actuators. The altitude control interface board is also responsible for polling sensors and actuators for telemetry and pre-processing the raw signals ( e.g. voltages from a pressure sensor) into the appropriate derived values ( e.g. values in units of pressure) before sending them to the CAN bus for use by other flight software and downlink. Hardware Altitude Control/Dynamics Sensor Card Sensing GPS (altitude) Location? Barometric altimeter Location? Valve actuator position/state Balloon valve sensor: Balloon Board (Optional) Ambient and balloon internal pressures Balloon pressure: Balloon Board Ambient pressure: Avionics Sensor Card Actuation Ballast: See Ballast Hopper Bleed: See Balloon Plug System Design Parameters Requirements Requirement Description Target Allowable Bounds Settling time Time for controller to transition from stabilize mode to cruise mode. 20 minutes 10 minutes - 1 hour Steady state error (dead zone) Magnitude of the difference between target altitude and actual altitude during cruise mode. 150 m 0 m - 500 m Ballast mass budget Portion of total system mass budget allocated to ballast material. 1 kg or 25% 1 kg - 2 kg Bleed mass budget Portion of total system lift gas allocated to altitude control. 0.5 kg or 30% no more than the mass of lift gas needed for positive lift with empty ballast Flight duration Impact on total flight time ( launch to recovery ) compared to an equivalent flight with altitude control disabled. +3 hours no less than the modeled flight duration with controller disabled (upper bound constrained by geofencing and weather) System Elements Configuration Item Function Location Interfaces Altitude control application Executes control algorithm and issues commands to actuators. https://brickworks.atlassian.net/wiki/spaces/NUCLEUS/pages/106692609/Main+Flight+Computer+Software+Design#Altitude-Controller * Main Flight Computer Software Design Telemetry RX App Design Command Stream| | Altitude Control/Dynamics Sensor Card |Receives commands, drives bleed and ballast actuators, collects and preprocesses signals from sensors and reports telemetry to the CAN bus. ( Altitude Control/Dynamics Card Software Design )| Avionics Rack |* Avionics Rack Backplane Interface Board CAN bus| |Ballast valve actuator|Dispenses ballast mass.| Ballast Hopper |* Ballast Hopper Altitude Control/Dynamics Sensor Card | |Bleed valve actuator|Dispenses lift gas.| Balloon Plug |* Balloon Plug Altitude Control/Dynamics Sensor Card | |Barometric altimeter|Measures barometric altitude.| Avionics Sensor Card | Payload structural bus| |GPS (altitude)|Measures altitude using GPS.| Avionics Sensor Card | Payload structural bus| Risk assessment Risk Likelihood Impact Mitigation Controller bleeds too much gas so that the remaining gas in the balloon cannot lift the payload, even with an empty ballast hopper. SEVERE Flight terminated early.|* Calibrate the bleed valve mass flow rate (perhaps in correlation to balloon internal pressure and/or time spent with valve open) and place a software disarm based on estimated gas remaining.| |Altitude never converges to a stable altitude by the time actuation limits are reached.||MINOR No impact on other aspects of the flight.|* Tune the controller to minimize overshoot and oscillations, allowing for a longer response time.| |Bleed valve releases more gas than it thinks it did.||MODERATE It\u2019s okay if more gas is released than expected unless the remaining gas in the system cannot lift the dry mass of an empty vehicle.|* Add some margin to the lift gas reserve level so that the controller disarms due to low gas before reaching a dangerously low level. Make a direct measurement from inside the balloon correlated to the amount of gas remaining, such as a calibrated temperature and pressure corresponded to gas remaining.| |Bleed valve gets stuck open.||SEVERE Flight terminated early.|* Redundant valve close mechanism? Build a cutdown threshold altitude into the controller. If the altitude controller is armed and altitude reaches the lower bound, issue a cutdown command. (If a target alt was 80k ft with allowable error of +/- 500m, issue a cutdown at 60k ft.| |Bleed valve gets stuck closed.||MINOR Altitude control is critically disabled. No impact on other aspects of the flight.|* Testing and pre-flight inspection.| |Ballast valve gets stuck open.||MINOR Altitude control is critically disabled. No impact on other aspects of the flight.|* Testing and pre-flight inspection.| |Ballast valve gets stuck closed.||MODERATE If ballast is stuck closed and the vehicle is descending, this would terminate the flight as the vehicle would not be able to recover positive lift.|* Redundant valve open mechanism? Emergency dumping of all ballast?| |Controller is armed too early.||MODERATE Bleed and ballast reserves could be expended prior to reaching the target altitude.|* Place conservative delays and lockouts on the arming criteria.| Proof of Concept Simulink Uses an implementation of Simple Atmospheric Flight Model in MATLAB+Simulink","title":"Concept of Operations"},{"location":"flight_altctrl_conops/#altitude-control-system","text":"Actively control the weight and buoyancy of the HAB in order to maintain equilibrium at a prescribed altitude for as long as resources allow.","title":"Altitude Control System"},{"location":"flight_altctrl_conops/#approach","text":"Normally the balloon is filled with lifting gas so that it rises with the payload until it reaches an altitude where the ambient temperature and pressure cause the balloon to expand beyond its limits and it bursts. Without active control, flight time can be increased by filling the balloon with just enough lift gas to be at equilibrium at the target altitude, but this is difficult for several reasons: The actual temperature and pressure at the target altitude are at best roughly approximated by models, even when accounting for the latest weather forecast. Temperature and pressure are not constant at the target altitude, so even if there was a perfectly measured amount of lift gas to be at equilibrium for a specific temperature and pressure band, it wouldn\u2019t follow a target altitude. Filling the balloon with less gas would mean it takes longer for the HAB to reach the target altitude. The HAB\u2019s altitude is a function of two opposing forces: the upward buoyancy force and the weight of the balloon-payload system. Critically, both are directly influenced by something we can control. Buoyancy is a function of the amount of lift gas in the balloon, and weight is a function of the mass of the payload. Thus we can design a closed-loop control algorithm to change the balance of these two forces by bleeding lift gas from the balloon or dropping ballast mass from the payload based on the measured altitude in order to converge to some target altitude. This addresses a number of issues encountered with passive flight: Dynamic feedback control allows the balloon to maintain equilibrium at a target altitude through changing temperatures and pressures. Open-loop control of lifting gas allows the balloon to be overfilled at launch, rising to the target altitude quickly and then bleeding gas from the balloon until equilibrium is achieved. In order for the controller to converge to a geometric altitude, it must use a non-atmospheric reference like GPS altitude. Barometric altimeters measure pressure, which is calibrated to isobaric layers of a standard reference atmosphere. Primary mode: GPS altitude hold. Secondary mode: Isobaric altitude hold.","title":"Approach"},{"location":"flight_altctrl_conops/#conops","text":"Wait for a controller enable to be sent. Disarm the controller when the avionics boot up. During pre-launch, operators enable the controller. Disarm the controller unless when all of the following conditions are met: A controller enable command has been received since the last boot or the last controller disable command. The control error has crossed zero at least once ( i.e. , the HAB\u2019s altitude has risen above the target altitude at least once). There is ballast mass remaining in the reservoir. Calibrate the mass flow rate at the ballast release valve prior to flight and keep a tally of remaining ballast mass. There is enough lifting gas in the balloon for the HAB to rise if the reservoir were empty. Use a pressure sensor in the balloon to compute the mass flow rate at the bleed valve from the gauge pressure and temperature of lifting gas inside the balloon and keep a tally of remaining lifting gas. Use a tuned PI control to drive a ballast release valve and a gas bleed valve. The controller is designed for disturbance rejection of a noisy altitude signal. 1. In order to conserve control effort, we must tune the controller such that overshoot and oscillations are minimized. Response time and settling time should be tuned to be small compared to flight time, but can still be on the order of ~1 hour. Control loop PWM frequency is tuned to be much faster than the response time. Enter stabilize control mode when the controller is armed and remain in this mode until ascent rate and/or altitude error are greater than the allowable bounds. GPS altitude hold (Stabilize) Use GPS altitude to converge to a geometric altitude that may cross isobaric layer boundaries. This control mode uses more control mass than barometric altitude hold so it should not be used for extended periods of time. Use this control mode during the stabilize phase to quickly approach the target altitude. If the GPS module cannot obtain a solid lock, fall back to barometric altitude for this phase. Once the vehicle is near the target altitude and has reached a steady state, transition to cruise mode to maintain an altitude near the target for an extended period of time. Barometric altitude hold (Cruise) Use barometric altitude to equalize to an isobaric layer of the atmosphere corresponding to a calibrated approximate altitude. This control mode uses less control mass because it is able to equalize the balloon pressure to ambient pressure and \u201cride\u201d isobaric layers of atmosphere. Hold an isobaric altitude during the cruise phase in order to conserve control mass. If the controller is still armed and the altitude error exceeds the allowable range, transition from cruise to stabilize and then repeat this algorithm until the controller is disarmed. When the controller is disarmed, dump all remaining ballast. Lock the ballast valve in the open position. Lock the bleed valve in the closed position. To Do: Describe in greater detail the \u201clockout\u201d conditions, how delay criteria work (do not act until accumulated steady state error is above threshold), how actuation commands are structured (PWM with actuation duration, where 0 or -1 duration means do nothing)","title":"ConOps"},{"location":"flight_altctrl_conops/#pid-control","text":"In order to dynamically determine how much to bleed or ballast, we implement a PID controller to determine the percentage of time of each control cycle to keep the bleed or ballast valve open. This is also referred to as PWM control with a PID algorithm. The PID control algorithm works by modulating the inputs, u , to the Plant , which in our case means the bleed and ballast controls. The Plant is the physical response, so the balance of weight, buoyancy, and drag forces with the given mass properties and ambient conditions. (See https://brickworks.atlassian.net/wiki/spaces/HT/pages/63799297/Simple+Atmospheric+Flight+Model#Sum-of-Forces-%2F-Net-Force ) The output of the Plant is the actual altitude, y . For a given set point altitude, r , the PID controller attempts to reduce the error, e=r-y , to zero. The PID controller consists of a set of gains applied to a proportional term, an integral term, and a derivative term that all operate on the error signal, e . These gains are tuned to get the desired response from the controller. Rules of thumb Proportional gain : How aggressively signal approaches setpoint. Too much causes overshoot. No impact on steady-state error. Integral gain : How much error matters over time. Reduces oscillations and steady-state errors. Prone to windup , where accumulated errors over a long time cause lag in the controller after it reaches the desired point. Derivative gain : How much rate of change matters. Reduces overshoot. Prone to oscillations. Noisy signals make it go crazy, but this can be mitigated by adding a lowpass filter. References BYU Dynamics and Control by John D. Hedengren Control Tutorials for Matlab & Simulink PID Control Design by A.B. Campo Wikipedia - PID Controller , Wikipedia - Integral Windup The Basics of Tuning PID Loops","title":"PID Control"},{"location":"flight_altctrl_conops/#tunable-parameters","text":"To achieve the desired behavior from the controller, we tune some of the parameters in software and tune other parameters as part of choosing or sizing elements of the system during the design process.","title":"Tunable Parameters"},{"location":"flight_altctrl_conops/#pure-tunables","text":"I call the parameters that we can choose and change \u201cfor free\u201d pure tunables , since tuning these values can be done as desired without extra engineering work. Target altitude Controller dead zone (allowable steady state error) Control loop cycle time (compute) Control loop cycle time (actuation PWM) Sensor measurement sample time Lowpass filter gain PID controller gains (which determine response time and percent overshoot) Initial ballast mass Initial lift gas mass Lift gas reserve fraction (fraction of total mass of lift gas allocated for altitude control) Arm / disarm criteria","title":"Pure Tunables"},{"location":"flight_altctrl_conops/#calibrated-tunables","text":"Calibrated tunables are what I call parameters that affect the controller\u2019s behavior or system response but can\u2019t be dialed in on a whim. These are things that require extra engineering or design changes to tune. We choose ideal values for these parameters during the design process, and then we measure the true values when the system is built. Ballast mass flow rate Bleed mass flow rate Actuator and component dry mass Maximum control loop cycle time (compute) Maximum control loop cycle time (actuation PWM) Maximum sensor measurement sample time Maximum lift gas reserve fraction","title":"Calibrated Tunables"},{"location":"flight_altctrl_conops/#avionics","text":"The altitude control flight software application ( https://brickworks.atlassian.net/wiki/spaces/NUCLEUS/pages/106692609/Main+Flight+Computer+Software+Design#Altitude-Controller ) issues commands to open the ballast or bleed valves over the CAN bus. When a bleed or ballast command is received by the altitude control interface board ( Altitude Control/Dynamics Sensor Card ) over CAN, it executes the corresponding subroutine to carry out the command. The software environment onboard the altitude control interface board ( Altitude Control/Dynamics Card Software Design ) includes drivers for the hardware interfaces, such as a PWM motor controller for the valve actuators. The altitude control interface board is also responsible for polling sensors and actuators for telemetry and pre-processing the raw signals ( e.g. voltages from a pressure sensor) into the appropriate derived values ( e.g. values in units of pressure) before sending them to the CAN bus for use by other flight software and downlink.","title":"Avionics"},{"location":"flight_altctrl_conops/#hardware","text":"Altitude Control/Dynamics Sensor Card Sensing GPS (altitude) Location? Barometric altimeter Location? Valve actuator position/state Balloon valve sensor: Balloon Board (Optional) Ambient and balloon internal pressures Balloon pressure: Balloon Board Ambient pressure: Avionics Sensor Card Actuation Ballast: See Ballast Hopper Bleed: See Balloon Plug","title":"Hardware"},{"location":"flight_altctrl_conops/#system-design-parameters","text":"","title":"System Design Parameters"},{"location":"flight_altctrl_conops/#requirements","text":"Requirement Description Target Allowable Bounds Settling time Time for controller to transition from stabilize mode to cruise mode. 20 minutes 10 minutes - 1 hour Steady state error (dead zone) Magnitude of the difference between target altitude and actual altitude during cruise mode. 150 m 0 m - 500 m Ballast mass budget Portion of total system mass budget allocated to ballast material. 1 kg or 25% 1 kg - 2 kg Bleed mass budget Portion of total system lift gas allocated to altitude control. 0.5 kg or 30% no more than the mass of lift gas needed for positive lift with empty ballast Flight duration Impact on total flight time ( launch to recovery ) compared to an equivalent flight with altitude control disabled. +3 hours no less than the modeled flight duration with controller disabled (upper bound constrained by geofencing and weather)","title":"Requirements"},{"location":"flight_altctrl_conops/#system-elements","text":"Configuration Item Function Location Interfaces Altitude control application Executes control algorithm and issues commands to actuators. https://brickworks.atlassian.net/wiki/spaces/NUCLEUS/pages/106692609/Main+Flight+Computer+Software+Design#Altitude-Controller * Main Flight Computer Software Design Telemetry RX App Design Command Stream| | Altitude Control/Dynamics Sensor Card |Receives commands, drives bleed and ballast actuators, collects and preprocesses signals from sensors and reports telemetry to the CAN bus. ( Altitude Control/Dynamics Card Software Design )| Avionics Rack |* Avionics Rack Backplane Interface Board CAN bus| |Ballast valve actuator|Dispenses ballast mass.| Ballast Hopper |* Ballast Hopper Altitude Control/Dynamics Sensor Card | |Bleed valve actuator|Dispenses lift gas.| Balloon Plug |* Balloon Plug Altitude Control/Dynamics Sensor Card | |Barometric altimeter|Measures barometric altitude.| Avionics Sensor Card | Payload structural bus| |GPS (altitude)|Measures altitude using GPS.| Avionics Sensor Card | Payload structural bus|","title":"System Elements"},{"location":"flight_altctrl_conops/#risk-assessment","text":"Risk Likelihood Impact Mitigation Controller bleeds too much gas so that the remaining gas in the balloon cannot lift the payload, even with an empty ballast hopper. SEVERE Flight terminated early.|* Calibrate the bleed valve mass flow rate (perhaps in correlation to balloon internal pressure and/or time spent with valve open) and place a software disarm based on estimated gas remaining.| |Altitude never converges to a stable altitude by the time actuation limits are reached.||MINOR No impact on other aspects of the flight.|* Tune the controller to minimize overshoot and oscillations, allowing for a longer response time.| |Bleed valve releases more gas than it thinks it did.||MODERATE It\u2019s okay if more gas is released than expected unless the remaining gas in the system cannot lift the dry mass of an empty vehicle.|* Add some margin to the lift gas reserve level so that the controller disarms due to low gas before reaching a dangerously low level. Make a direct measurement from inside the balloon correlated to the amount of gas remaining, such as a calibrated temperature and pressure corresponded to gas remaining.| |Bleed valve gets stuck open.||SEVERE Flight terminated early.|* Redundant valve close mechanism? Build a cutdown threshold altitude into the controller. If the altitude controller is armed and altitude reaches the lower bound, issue a cutdown command. (If a target alt was 80k ft with allowable error of +/- 500m, issue a cutdown at 60k ft.| |Bleed valve gets stuck closed.||MINOR Altitude control is critically disabled. No impact on other aspects of the flight.|* Testing and pre-flight inspection.| |Ballast valve gets stuck open.||MINOR Altitude control is critically disabled. No impact on other aspects of the flight.|* Testing and pre-flight inspection.| |Ballast valve gets stuck closed.||MODERATE If ballast is stuck closed and the vehicle is descending, this would terminate the flight as the vehicle would not be able to recover positive lift.|* Redundant valve open mechanism? Emergency dumping of all ballast?| |Controller is armed too early.||MODERATE Bleed and ballast reserves could be expended prior to reaching the target altitude.|* Place conservative delays and lockouts on the arming criteria.|","title":"Risk assessment"},{"location":"flight_altctrl_conops/#proof-of-concept","text":"","title":"Proof of Concept"},{"location":"flight_altctrl_conops/#simulink","text":"Uses an implementation of Simple Atmospheric Flight Model in MATLAB+Simulink","title":"Simulink"},{"location":"flight_avhw_arch/","text":"Flight Avionics Hardware Work in progress This page contains information that may be incorrect or out of date. Check Confluence for the latest project information. List of currently in development boards: Main Flight Computer Card Avionics Sensor Card Altitude Control/Dynamics Sensor Card Communications Card Power Supply Card Backplane Interface Board Balloon Board Design Info Hardware Design Notebook List of future payload boards: Imaging Card General Payload Hardware Description For Brickworks first HAB launch, the electronics payload architecture consists of eight distinct PCBs. a Backplane Interface provides data and power between all payload cards, balloon board and ground interface. The current payload consists of an Avionics Control Card, Avionics Sensor Card, Altitude Control/Dynamics Sensor Card, Communications Card and Power Supply Card. There is also a Balloon Board attached to the balloon neck. The backplane interface is in the form of a 2mm pitch header style connectors across the backplane for the avionics card, a Molex microfit connector for the balloon board and ethernet port for the ground interface. Each card is designed such that the blackplane connector is the rear of the card and provides all the avionics interfaces. There will also be additional input/output connections on the front of the card to provide additional sensor and control interfaces that are too low level for the backplane interface. Individual Board Description Main Flight Computer Card This board acts as the brain of the overall payload, containing an application processor level compute card/SoM allowing for the avionics software to run in a Linux environment. All payload control loops and main software systems live on this card. There are two separate data interfaces implemented on this board, all connecting to the other boards through the backplane. An Ethernet switch, acting as high level data and control communications and a CAN bus interface, acting as low level telemetry and status communications. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail through the Raspberry Pi. The board is connected to the backplane interface in Slot A and always slot A due to the output pin requirements of this card. Avionics Sensor Card This microcontroller based board abstracts the \u201cgeneric\u201d sensors and interfaces used by the avionics control board on all flights. Contains an IMU, pressure sensor and temperature sensor as well as GPS. There is also a \u201crecovery assist\u201d package that will drive a buzzer and LEDs for assisting recovery. An Ethernet and CAN bus interface is provided through connection to the backplane, as well as a common GPIO and three distinct GPIO connections. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail. Power Supply Card This microcontroller based board is the main power supply for the overall payload. Connects to a 4SnP lithium ion battery pack and contains charging, monitoring and balancing circuitry related to said battery pack. There are two main regulators providing power from the battery pack to the rest of the payload, a 5V+ \u201clogic\u201d power rail and a 12V+ \u201ccontroller\u201d power rail. Microcontroller based collection of telemetry such as battery State of Charge, 5V+/12V+ voltage and current information and temperature is transmitted over CAN back to the avionics board. Communications Card BLOCK DIAGRAM This microcontroller based(?) board contains the radios used to communicate back to the ground station. A LimeSDR is the primary control of the RF portion of the board and communicates back to the main flight computer using USB. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail. Altitude/Dynamics Control Card This board is a microcontroller based board that contains both the mechanisms used to maintain a specific altitude during the payload\u2019s mission as well as the sensors used for developing a dynamic model of the payload during flight. Contains the altitude control IMU and pressure sensor as well as ballast release system and sensor nodes for the dynamics system. An Ethernet and CAN bus interface is provided through connection to the backplane, as well as a common GPIO and three distinct GPIO connections. The board accepts both a +5V and +12V power rail and locally regulates +1.8V and +3.3V from the +5V rail. Balloon Board The board is attached to the balloon neck and contains an IMU used for Dynamics, pressure and temperature sensor for balloon monitoring and control systems used for altitude control helium release. The board has a cable harness connection back to the backplane that contains a CAN bus interface as well as three distinct GPIO and one common GPIO connection. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail. Backplane Interface Board This board is a passive backplane that provides all data and power interfaces used between the different payload cards. The backplane is keyed in a way such that the Avionics Control Card is always in slot \u201cA\u201d due to pinout configurations and the Power Supply Card is always in slot \u201cG\u201d for similar reasons. All other payload cards can be installed in any of the remaining interfaces. Provided interfaces include CAN bus and Ethernet as well as a +5V and +12V power rails to each card. There is also a common GPIO connection to all Cards as well as three distinct GPIO connections to each Card. Separate from the standard Card interfaces are the balloon board interface and the ground interface. The balloon board interface is a JST style connection used only for the balloon control and the ground interface is an INSERT HERE style interface used only for communicating with the ground station/strongbrick. Dynamics Sensor Board This board is a separate sensor board containing an IMU and pressure sensor used for the dynamics modeling payload. It is located at specific positions within the HAB and interfaces with the Altitude Control/Dynamics Sensor Card through a cable harness. Board cable harness contains an I2C interface and +1.8V voltage rail. These boards will connect to the \u201cSensor Node\u201d inputs on the Attitude Control/Dynamics Sensor Card.","title":"HAB Avionics Architecture"},{"location":"flight_avhw_arch/#flight-avionics-hardware","text":"Work in progress This page contains information that may be incorrect or out of date. Check Confluence for the latest project information.","title":"Flight Avionics Hardware"},{"location":"flight_avhw_arch/#list-of-currently-in-development-boards","text":"Main Flight Computer Card Avionics Sensor Card Altitude Control/Dynamics Sensor Card Communications Card Power Supply Card Backplane Interface Board Balloon Board Design Info Hardware Design Notebook","title":"List of currently in development boards:"},{"location":"flight_avhw_arch/#list-of-future-payload-boards","text":"Imaging Card","title":"List of future payload boards:"},{"location":"flight_avhw_arch/#general-payload-hardware-description","text":"For Brickworks first HAB launch, the electronics payload architecture consists of eight distinct PCBs. a Backplane Interface provides data and power between all payload cards, balloon board and ground interface. The current payload consists of an Avionics Control Card, Avionics Sensor Card, Altitude Control/Dynamics Sensor Card, Communications Card and Power Supply Card. There is also a Balloon Board attached to the balloon neck. The backplane interface is in the form of a 2mm pitch header style connectors across the backplane for the avionics card, a Molex microfit connector for the balloon board and ethernet port for the ground interface. Each card is designed such that the blackplane connector is the rear of the card and provides all the avionics interfaces. There will also be additional input/output connections on the front of the card to provide additional sensor and control interfaces that are too low level for the backplane interface.","title":"General Payload Hardware Description"},{"location":"flight_avhw_arch/#individual-board-description","text":"","title":"Individual Board Description"},{"location":"flight_avhw_arch/#main-flight-computer-card","text":"This board acts as the brain of the overall payload, containing an application processor level compute card/SoM allowing for the avionics software to run in a Linux environment. All payload control loops and main software systems live on this card. There are two separate data interfaces implemented on this board, all connecting to the other boards through the backplane. An Ethernet switch, acting as high level data and control communications and a CAN bus interface, acting as low level telemetry and status communications. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail through the Raspberry Pi. The board is connected to the backplane interface in Slot A and always slot A due to the output pin requirements of this card.","title":"Main Flight Computer Card"},{"location":"flight_avhw_arch/#avionics-sensor-card","text":"This microcontroller based board abstracts the \u201cgeneric\u201d sensors and interfaces used by the avionics control board on all flights. Contains an IMU, pressure sensor and temperature sensor as well as GPS. There is also a \u201crecovery assist\u201d package that will drive a buzzer and LEDs for assisting recovery. An Ethernet and CAN bus interface is provided through connection to the backplane, as well as a common GPIO and three distinct GPIO connections. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail.","title":"Avionics Sensor Card"},{"location":"flight_avhw_arch/#power-supply-card","text":"This microcontroller based board is the main power supply for the overall payload. Connects to a 4SnP lithium ion battery pack and contains charging, monitoring and balancing circuitry related to said battery pack. There are two main regulators providing power from the battery pack to the rest of the payload, a 5V+ \u201clogic\u201d power rail and a 12V+ \u201ccontroller\u201d power rail. Microcontroller based collection of telemetry such as battery State of Charge, 5V+/12V+ voltage and current information and temperature is transmitted over CAN back to the avionics board.","title":"Power Supply Card"},{"location":"flight_avhw_arch/#communications-card","text":"BLOCK DIAGRAM This microcontroller based(?) board contains the radios used to communicate back to the ground station. A LimeSDR is the primary control of the RF portion of the board and communicates back to the main flight computer using USB. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail.","title":"Communications Card"},{"location":"flight_avhw_arch/#altitudedynamics-control-card","text":"This board is a microcontroller based board that contains both the mechanisms used to maintain a specific altitude during the payload\u2019s mission as well as the sensors used for developing a dynamic model of the payload during flight. Contains the altitude control IMU and pressure sensor as well as ballast release system and sensor nodes for the dynamics system. An Ethernet and CAN bus interface is provided through connection to the backplane, as well as a common GPIO and three distinct GPIO connections. The board accepts both a +5V and +12V power rail and locally regulates +1.8V and +3.3V from the +5V rail.","title":"Altitude/Dynamics Control Card"},{"location":"flight_avhw_arch/#balloon-board","text":"The board is attached to the balloon neck and contains an IMU used for Dynamics, pressure and temperature sensor for balloon monitoring and control systems used for altitude control helium release. The board has a cable harness connection back to the backplane that contains a CAN bus interface as well as three distinct GPIO and one common GPIO connection. The board accepts a +5V and power rail and locally regulates +1.8V and +3.3V from the +5V rail.","title":"Balloon Board"},{"location":"flight_avhw_arch/#backplane-interface-board","text":"This board is a passive backplane that provides all data and power interfaces used between the different payload cards. The backplane is keyed in a way such that the Avionics Control Card is always in slot \u201cA\u201d due to pinout configurations and the Power Supply Card is always in slot \u201cG\u201d for similar reasons. All other payload cards can be installed in any of the remaining interfaces. Provided interfaces include CAN bus and Ethernet as well as a +5V and +12V power rails to each card. There is also a common GPIO connection to all Cards as well as three distinct GPIO connections to each Card. Separate from the standard Card interfaces are the balloon board interface and the ground interface. The balloon board interface is a JST style connection used only for the balloon control and the ground interface is an INSERT HERE style interface used only for communicating with the ground station/strongbrick.","title":"Backplane Interface Board"},{"location":"flight_avhw_arch/#dynamics-sensor-board","text":"This board is a separate sensor board containing an IMU and pressure sensor used for the dynamics modeling payload. It is located at specific positions within the HAB and interfaces with the Altitude Control/Dynamics Sensor Card through a cable harness. Board cable harness contains an I2C interface and +1.8V voltage rail. These boards will connect to the \u201cSensor Node\u201d inputs on the Attitude Control/Dynamics Sensor Card.","title":"Dynamics Sensor Board"},{"location":"flight_avhw_mfc/","text":"Main Flight Computer Card Work in progress This page contains information that may be incorrect or out of date. Check Confluence for the latest project information. Theory of Operation The Main Flight Computer Card (MFC) is the brain of the avionics stack. This card handles all primary functions and sends/receives data to/from all other cards in the stack. Main Processor A Raspberry Pi 4 Compute Module is used as the main processor on this card. The minimum required configuration is listed below. CM4001008 - CM4, no wireless, 1GB of RAM, 8GB of eMMC Options for the Rpi4 compute module extend up to 8GB of RAM and 32GB of eMMC as well as wifi. These are easily incorporated into the HAB stack as necessary if compute requirements increase over time. This vastly simplifies the required hardware needed for the MFC. The Pi provides many of the needed interfaces for this project. Currently in use are the Ethernet, PCIe and I2C interfaces as well as the GPIO bank. The Ethernet interface is used for a direct connection to the outside world through the ground station while the PCIe link is used to interface with the Ethernet network build into the overall hardware stack. I2C is used for on card sensors and GPIO is distributed out to the rest of the cards within the stack. The design implementation of the Pi4 on the MFC follows the reference design for the Pi4 compute Module IO board. Power and activity LEDs are present as well as Ethernet status LEDs. The Pi external reset is buffered and routed to the PCIe/Ethernet bridge. Finally a watchdog timer IC, the same as the IO board, is implemented for use as part of a Real Time Clock for the Pi. Power for portions of the MFC is generated by the Pi\u2019s onboard 3.3V and 1.8V regulators. The 1.8V regulator is broken out to the MFC however it is not currently used for any circuitry. 5V is supplied from the power board through the backplane. 1.2V and 2.5V are generated by switching regulators on the MFC itself but will be covered in a different section. While most of the signal interfaces are used for this design, options such as camera and display outputs are not broken out and there are no plans to use within the design of the MFC. SD card interface is also like wise not broken out as there are no plans for using Pi\u2019s without eMMC onboard. Communication and Control Interfaces Ethernet Interfaces and Hub PCIe to ETH Hub The LAN7431 Low Power PCIe to Gigabit Ethernet Controller is implemented in this design to interface the Pi4 CM to the ETH switch. The LAN7431 was chosen as it has MII and RGMII support needed for the switch. While the IC has integrated switching regulators to generate certain voltages, these were disabled in favor of switching regulators implemented on the MFC itself. Benefits to this are mainly less power dissipated in the IC itself and the generated rails can be shared between multiple ICs, however there is likely some loss in switching efficiency. VDDVARIO and VDD_SW_IN have the option of 3.3V and 1.8V; 3.3V was used for power in this case. The IC is configured to operate in MII mode, with the MII_EN pin pulled high with a 10k resistor per the datasheet recommendation, tied to the same 3.3V rail as VDDVARIO. Other configuration settings include pulling the DUPLEX pin high to enable full duplex on the IC, allowing simultaneous communication between cards. Finally VAUX is pulled high to enable Power Management Event functions provided by the IC, allowing the IC to be woken from additional sleep states. The Pi4 CM output reset is fed into this IC, to provide a reset option in case the ETH interface needs to be cycled. This is also indirectly provided to the switch through the reset output provided by the bridge as well. Finally a 25MHz clock is implemented for this IC, per datasheet recommendations. It is also used to provide the clock for the ETH switch through the use of the IC\u2019s passthrough feature. This reduced the total number of clock crystals that needed to be implemented on the MFC PCB ETH Hub to ETH Switch, outputs The KSZ9896CTXI 6-Port Gigabit Ethernet Switch is implemented in this design to provide connectivity to the rest of the HAB payload stack. It accepts MII interface from the LAN7431 and provides five outputs with full gigabit PHYs, however these are only expected to be used at 10mbps speeds. The IC is supplied through three voltage rails, 3.3V, 2.5V and 1.2V. VDDIO is the only rail powered by 3.3V, chosen for easy interface with the LAN7431 and anything else interfacing with the IC. Due to the design of the hardware stack, magnetic coupling for the ethernet pairs was not implemented. Capacitive coupling is used to connect the various payload cards through ethernet to the MFC. This implementation was chosen due to the use of a backplane PCB carrying all ethernet routing, the short runs of the ethernet lines (<12\u201d total) and the fact that all aspects of the links are controlled. This also deletes the need for reasonably bulky magnetics, instead replaced by series capacitors and pull up resistors. APP1 through APP3 (provided below) describe the implementation of the transformerless system used in this design. As described in APP3 the pull up resistors on the MFC ethernet lines were chosen to maintain a level greater than 1.3V and not have a large voltage swing. Note: find math regarding pull up R\u2019s, add references to white papers External Output Ethernet The Ethernet output provided by the Pi4 CM is routed straight to its respective backplane connector; ETH1_TX and ETH1_RX. This is then routed to the required Ethernet jack located on the backplane for use to communicate with the outside world. The port is routed with only two ETH pairs, providing an RX and TX pair for primarily a 10BASE-T, 10mbps connection. Routing follows the Pi4 CM datasheet recommendations CAN bus talk about CAN, termination node, IC used and implementation GPIO 30 odd GPIO lines, Common GPIO for reset. Pull down/up etc Sensors thermistors current sensor Power Management Electrical Implementation Major components Processor - Raspberry Pi 4 Compute Module (CM4001008) CAN Transceiver - TCAN1051 Ethernet Switch - KSZ9896C Ethernet PHY - KSZ8081MNX Voltage/current monitor - INA3221 Power Supplies 12V Power Rail No usage 5V Power Rail Raspberry Pi 4 CAN Transceiver 2.5V Regulator 1.2V Regulator 3.3V Power Rail (driven by Pi4) Temperature Sensor Ethernet Switch (I/O) Ethernet Phy CAN Transceiver 2.5V Power Rail Ethernet Switch (transceivers) 1.2V Power Rail Ethernet Switch (core) Connectors There are two 34 pin Molex MilliGrid Shrouded Right angle Connectors providing all interfaces to and from the Flight computer to the Backplane and other payload cards. Power/GPIO Connector Molex Part #: 0878333420","title":"Main Flight Computer Card"},{"location":"flight_avhw_mfc/#main-flight-computer-card","text":"Work in progress This page contains information that may be incorrect or out of date. Check Confluence for the latest project information.","title":"Main Flight Computer Card"},{"location":"flight_avhw_mfc/#theory-of-operation","text":"The Main Flight Computer Card (MFC) is the brain of the avionics stack. This card handles all primary functions and sends/receives data to/from all other cards in the stack.","title":"Theory of Operation"},{"location":"flight_avhw_mfc/#main-processor","text":"A Raspberry Pi 4 Compute Module is used as the main processor on this card. The minimum required configuration is listed below. CM4001008 - CM4, no wireless, 1GB of RAM, 8GB of eMMC Options for the Rpi4 compute module extend up to 8GB of RAM and 32GB of eMMC as well as wifi. These are easily incorporated into the HAB stack as necessary if compute requirements increase over time. This vastly simplifies the required hardware needed for the MFC. The Pi provides many of the needed interfaces for this project. Currently in use are the Ethernet, PCIe and I2C interfaces as well as the GPIO bank. The Ethernet interface is used for a direct connection to the outside world through the ground station while the PCIe link is used to interface with the Ethernet network build into the overall hardware stack. I2C is used for on card sensors and GPIO is distributed out to the rest of the cards within the stack. The design implementation of the Pi4 on the MFC follows the reference design for the Pi4 compute Module IO board. Power and activity LEDs are present as well as Ethernet status LEDs. The Pi external reset is buffered and routed to the PCIe/Ethernet bridge. Finally a watchdog timer IC, the same as the IO board, is implemented for use as part of a Real Time Clock for the Pi. Power for portions of the MFC is generated by the Pi\u2019s onboard 3.3V and 1.8V regulators. The 1.8V regulator is broken out to the MFC however it is not currently used for any circuitry. 5V is supplied from the power board through the backplane. 1.2V and 2.5V are generated by switching regulators on the MFC itself but will be covered in a different section. While most of the signal interfaces are used for this design, options such as camera and display outputs are not broken out and there are no plans to use within the design of the MFC. SD card interface is also like wise not broken out as there are no plans for using Pi\u2019s without eMMC onboard.","title":"Main Processor"},{"location":"flight_avhw_mfc/#communication-and-control-interfaces","text":"","title":"Communication and Control Interfaces"},{"location":"flight_avhw_mfc/#ethernet-interfaces-and-hub","text":"PCIe to ETH Hub The LAN7431 Low Power PCIe to Gigabit Ethernet Controller is implemented in this design to interface the Pi4 CM to the ETH switch. The LAN7431 was chosen as it has MII and RGMII support needed for the switch. While the IC has integrated switching regulators to generate certain voltages, these were disabled in favor of switching regulators implemented on the MFC itself. Benefits to this are mainly less power dissipated in the IC itself and the generated rails can be shared between multiple ICs, however there is likely some loss in switching efficiency. VDDVARIO and VDD_SW_IN have the option of 3.3V and 1.8V; 3.3V was used for power in this case. The IC is configured to operate in MII mode, with the MII_EN pin pulled high with a 10k resistor per the datasheet recommendation, tied to the same 3.3V rail as VDDVARIO. Other configuration settings include pulling the DUPLEX pin high to enable full duplex on the IC, allowing simultaneous communication between cards. Finally VAUX is pulled high to enable Power Management Event functions provided by the IC, allowing the IC to be woken from additional sleep states. The Pi4 CM output reset is fed into this IC, to provide a reset option in case the ETH interface needs to be cycled. This is also indirectly provided to the switch through the reset output provided by the bridge as well. Finally a 25MHz clock is implemented for this IC, per datasheet recommendations. It is also used to provide the clock for the ETH switch through the use of the IC\u2019s passthrough feature. This reduced the total number of clock crystals that needed to be implemented on the MFC PCB ETH Hub to ETH Switch, outputs The KSZ9896CTXI 6-Port Gigabit Ethernet Switch is implemented in this design to provide connectivity to the rest of the HAB payload stack. It accepts MII interface from the LAN7431 and provides five outputs with full gigabit PHYs, however these are only expected to be used at 10mbps speeds. The IC is supplied through three voltage rails, 3.3V, 2.5V and 1.2V. VDDIO is the only rail powered by 3.3V, chosen for easy interface with the LAN7431 and anything else interfacing with the IC. Due to the design of the hardware stack, magnetic coupling for the ethernet pairs was not implemented. Capacitive coupling is used to connect the various payload cards through ethernet to the MFC. This implementation was chosen due to the use of a backplane PCB carrying all ethernet routing, the short runs of the ethernet lines (<12\u201d total) and the fact that all aspects of the links are controlled. This also deletes the need for reasonably bulky magnetics, instead replaced by series capacitors and pull up resistors. APP1 through APP3 (provided below) describe the implementation of the transformerless system used in this design. As described in APP3 the pull up resistors on the MFC ethernet lines were chosen to maintain a level greater than 1.3V and not have a large voltage swing. Note: find math regarding pull up R\u2019s, add references to white papers External Output Ethernet The Ethernet output provided by the Pi4 CM is routed straight to its respective backplane connector; ETH1_TX and ETH1_RX. This is then routed to the required Ethernet jack located on the backplane for use to communicate with the outside world. The port is routed with only two ETH pairs, providing an RX and TX pair for primarily a 10BASE-T, 10mbps connection. Routing follows the Pi4 CM datasheet recommendations","title":"Ethernet Interfaces and Hub"},{"location":"flight_avhw_mfc/#can-bus","text":"talk about CAN, termination node, IC used and implementation","title":"CAN bus"},{"location":"flight_avhw_mfc/#gpio","text":"30 odd GPIO lines, Common GPIO for reset. Pull down/up etc","title":"GPIO"},{"location":"flight_avhw_mfc/#sensors","text":"thermistors current sensor","title":"Sensors"},{"location":"flight_avhw_mfc/#power-management","text":"","title":"Power Management"},{"location":"flight_avhw_mfc/#electrical-implementation","text":"","title":"Electrical Implementation"},{"location":"flight_avhw_mfc/#major-components","text":"Processor - Raspberry Pi 4 Compute Module (CM4001008) CAN Transceiver - TCAN1051 Ethernet Switch - KSZ9896C Ethernet PHY - KSZ8081MNX Voltage/current monitor - INA3221","title":"Major components"},{"location":"flight_avhw_mfc/#power-supplies","text":"","title":"Power Supplies"},{"location":"flight_avhw_mfc/#12v-power-rail","text":"No usage","title":"12V Power Rail"},{"location":"flight_avhw_mfc/#5v-power-rail","text":"Raspberry Pi 4 CAN Transceiver 2.5V Regulator 1.2V Regulator","title":"5V Power Rail"},{"location":"flight_avhw_mfc/#33v-power-rail-driven-by-pi4","text":"Temperature Sensor Ethernet Switch (I/O) Ethernet Phy CAN Transceiver","title":"3.3V Power Rail (driven by Pi4)"},{"location":"flight_avhw_mfc/#25v-power-rail","text":"Ethernet Switch (transceivers)","title":"2.5V Power Rail"},{"location":"flight_avhw_mfc/#12v-power-rail_1","text":"Ethernet Switch (core)","title":"1.2V Power Rail"},{"location":"flight_avhw_mfc/#connectors","text":"There are two 34 pin Molex MilliGrid Shrouded Right angle Connectors providing all interfaces to and from the Flight computer to the Backplane and other payload cards.","title":"Connectors"},{"location":"flight_avhw_mfc/#powergpio-connector","text":"Molex Part #: 0878333420","title":"Power/GPIO Connector"},{"location":"flight_mission-profile/","text":"Flight Profile Pre-Launch Permits and waivers are acquired. Pre-Launch hardware tests pass. Pre-Launch Checklist Launch Launch Day Checklist Remove before flight tags are removed. Electronics are powered up. Ballast is filled with material. Payload enclosure is closed for flight. Live telemetry is established with avionics over direct link. Health and safety of avionics is observed over live telemetry. Balloon is filled with lift gas. Balloon is released from ground fixture. Ascent Near Range (0-20,000ft altitude, <25mi slant range) Short-range radio link established with ground station receiving live telemetry. APRS radio link established with GPS and altitude data. Passive ascent to ~20,000ft. Ascent Far Range (20,000-100,000ft, >25mi slant range) Long-range radio link established with ground station. APRS radio link established with GPS and altitude data. Altitude controller armed and waiting to reach the target altitude. Stabilize (target altitude: 80,000 ft) The altitude controller begins actuating bleed and ballast valves. Ascent rate and altitude change rapidly over time. See Altitude Control System Cruise (target altitude: 80,000 ft) Altitude is stable (error < 500ft) for an extended period of time. Altitude controller is armed and but not active. Control Disabled (Ballast empty or position/time boundary reached) All remaining ballast is released. Altitude controller is disarmed. Cutdown (position/time boundary reached) On-board software determines that the flight must be terminated immediately. Multiple (redundant) cutdown elements relieve gas from the balloon. Bleed valve remains open until it senses descent. Nichrome heating element cuts the latex balloon from the balloon plug. Safety & Abort Systems (Cutdown) Descent Payload free falls until air pressure is high enough to unfurl the parachute. Parachute unfurls and slows descent. Payload begins beaconing (light and/or sound indicators). Recovery Payload continues to beacon light/sound indicators and GPS location via APRS. When landing is detected (altitude does not change for an extended period and controller is disarmed), payload enters low-power state for all systems except recovery beacons. Wait for recovery.","title":"Mission Profile"},{"location":"flight_mission-profile/#flight-profile","text":"Pre-Launch Permits and waivers are acquired. Pre-Launch hardware tests pass. Pre-Launch Checklist Launch Launch Day Checklist Remove before flight tags are removed. Electronics are powered up. Ballast is filled with material. Payload enclosure is closed for flight. Live telemetry is established with avionics over direct link. Health and safety of avionics is observed over live telemetry. Balloon is filled with lift gas. Balloon is released from ground fixture. Ascent Near Range (0-20,000ft altitude, <25mi slant range) Short-range radio link established with ground station receiving live telemetry. APRS radio link established with GPS and altitude data. Passive ascent to ~20,000ft. Ascent Far Range (20,000-100,000ft, >25mi slant range) Long-range radio link established with ground station. APRS radio link established with GPS and altitude data. Altitude controller armed and waiting to reach the target altitude. Stabilize (target altitude: 80,000 ft) The altitude controller begins actuating bleed and ballast valves. Ascent rate and altitude change rapidly over time. See Altitude Control System Cruise (target altitude: 80,000 ft) Altitude is stable (error < 500ft) for an extended period of time. Altitude controller is armed and but not active. Control Disabled (Ballast empty or position/time boundary reached) All remaining ballast is released. Altitude controller is disarmed. Cutdown (position/time boundary reached) On-board software determines that the flight must be terminated immediately. Multiple (redundant) cutdown elements relieve gas from the balloon. Bleed valve remains open until it senses descent. Nichrome heating element cuts the latex balloon from the balloon plug. Safety & Abort Systems (Cutdown) Descent Payload free falls until air pressure is high enough to unfurl the parachute. Parachute unfurls and slows descent. Payload begins beaconing (light and/or sound indicators). Recovery Payload continues to beacon light/sound indicators and GPS location via APRS. When landing is detected (altitude does not change for an extended period and controller is disarmed), payload enters low-power state for all systems except recovery beacons. Wait for recovery.","title":"Flight Profile"},{"location":"habtoolbox_1d-ascent-model/","text":"1D Atmospheric Flight Model A simple, one-dimensional flight model is used to predict the HAB\u2019s flight profile in the vertical axis, including altitude, ascent rate, and ascent accelerations. Try it out! 1976 COESA Atmosphere Model The atmosphere model is an implementation of the 1976 COESA Atmosphere Model, used in Simulink as the COESA block from MATLAB\u2019s Aerospace Toolbox or the Python package Ambiance . Both methods approximate atmospheric temperature, pressure, and density using a piecewise curve fit for the layers of the atmosphere based on this standard model. Limitations There are significant limitations to this atmosphere model, but it does well enough for us to get by. The model is not a function of humidity. The model does not account for differences due to the geographic location of the launch site such as latitude or local geography. The model does not account for local weather conditions, convection currents, disturbances, or wind currents. The layers of the atmosphere are modeled as discrete zones with discontinuities at fixed boundaries but the real layers of the atmosphere are continuous. Our approach to modeling the balloon\u2019s flight is an approximation anyway, and most of these limitations require more precision than a vertical-axis flight prediction would reasonably provide. We can still use this atmosphere model to understand the overarching forces that dominate the flight\u2019s ascent rate and altitude over time, accepting variations as noise. For more advanced applications that directly depend on atmospheric conditions such as altitude control, we need to design a system that can compensate for variations. By injecting random noise or random variations into the model\u2019s outputs, we can approximate the system\u2019s performance in response to changing weather or disturbances like convection. Balloon Flight Model Assumptions & Simplifications For this flight model, we are primarily interested in how the HAB changes altitude with time. Eventually, we might consider modeling the 3D flight path over time but for now, we\u2019ll table that for the future. By only considering the vertical axis we don\u2019t have to worry about the geographic location of the launch site as much, we can ignore lateral wind currents, and we reduce the coordinate frame from 3 axes to one axis. In short, the math gets a lot easier and there are much fewer variables to worry about. Assumption Justification We draw the control volume around the whole system (balloon, parachute, and payload) so that we are left with a point mass that reacts to atmospheric conditions. We ignore interactions between the balloon and the payload through the tether and treat it as a blob that has lighter-than-air gas in it and a bunch of dead weight. Rotating doesn\u2019t change the behavior of the blob, and the blob is too small to have differential effects from its size. We constrain the model to only the vertical axis, ignoring any lateral or rotational forces. This greatly simplifies our problem, distilling the system into a set of directly opposing forces in the vertical axis. We assume that the lift gas in the balloon is always at the same temperature and pressure as ambient air. Our model is not precise enough to account for thermodynamic effects caused by the balloon material, and at steady state the gas in the balloon will equalize to be close enough to ambient temperature and pressure that it\u2019s not worth taking into account. Drag only acts on the projected surface area from above looking down. Assume the balloon inflates as a sphere. We don't need to account for complicated aerodynamics. The size of the balloon is much larger than the size of the payload, so we can ignore the effects of drag on anything other than the balloon. When the balloon inflates it is not quite a sphere, but the true geometry is not close enough to account for differences. The lift gas behaves as an ideal gas. It's not worth the time or complexity to implement gas properties more in-depth than the Ideal Gas Law. Forces at Play Buoyancy The buoyancy force comes from the difference in densities between the gas in the balloon and the volume of atmosphere it displaces. The balloon\u2019s volume This force accounts for the weight of the lift gas. buoyancy_force = balloon_volume * (lift_gas_density - air_density) * gravity Remember that gravity is a negative (downward) acceleration. We arrange the subtraction between densities so that the buoyancy force is positive (upward). Weight Aside from the lift gas, the only force acting on the rest of the mass in our control volume is from gravity. Since the HAB flies at altitudes in excess of 30 km, we must account for changes in gravity with respect to altitude. standard_gravity = 9.80665 # [m/s^2] earth_mean_radius = 6.3781e6 # [m] gravity = standard_gravity * (earth_mean_radius / (earth_mean_radius + altitude))**2 weight = gravity * (balloon_mass + payload_mass) Drag Even though the buoyancy force is constantly greater than weight for the balloon to rise, the balloon does not accelerate constantly because there is drag from the air acting against the surface of the balloon. Drag always opposes the direction of motion. The volume (and therefore windward area) of the balloon changes with altitude. We assume the shape stays the same though, so the coefficient of drag does not change. balloon_radius = (balloon_volume * 3 / (4 * PI)) ** (1/3) windward_area = PI * (balloon_radius) ** 2 drag_force = 1/2 * (ascent_rate ** 2) * atmospheric_density * drag_coefficient * windward_area Sum of Forces / Net Force free body diagram The net force on the balloon-payload system is the sum of three primary forces: buoyancy, weight, and drag. Force as a function of Rationale Buoyancy mass of lift gas in the balloon, altitude Buoyancy is a function of the amount of lift gas in the balloon and the temperature, pressure, and density of the atmosphere. Using the COESA Atmosphere Model, temperature, pressure, and density of air are all functions of altitude only, so we can reduce the buoyancy force to be only a function of altitude. Drag mass of lift gas in the balloon, altitude, ascent rate Drag is a function of the windward area and velocity. Following the ideal gas law, the windward area can be derived from the volume of the balloon, and therefore from the amount of lift gas in the balloon and atmospheric conditions at a given temperature. Weight mass of everything other than lift gas, altitude The buoyancy force accounts for the mass of the lift gas, but the effect of gravity on every other part of the system still needs to be taken into account. The acceleration due to gravity changes as slightly as a function of altitude. Weight can be further divided up into which component is measured, like balloon mass, payload bus mass, payload electronics mass, et cetera. Free Lift Free Lift is an alternative way to measure the lift from the balloon and is a handy way to make sure the balloon is filled to the right level or to calculate the ascent rate and other things with the HABHub Burst Calculator . Free lift measures the net amount of lift provided by the helium in units of kilograms. I like to think of free lift as being what a fish scale would read if you attached it to the payload and filled up the balloon. Effectively this is a measure of net force without the acceleration term. Balloon Parameters Parameters like the coefficient of drag and balloon mass are obtained from the balloon spec sheet from the manufacturer. If the volume of the lift gas exceeds the max volume listed in the spec sheet or the internal pressure exceeds the max listed pressure, we assume the balloon will burst. Likewise, the manufacturer provides a recommended Free Lift value for a given payload mass, which is used to calculate things like estimated max altitude. We use Kaymont high altitude balloons as a reference for balloon parameters.","title":"1D Atmospheric Flight Model"},{"location":"habtoolbox_1d-ascent-model/#1d-atmospheric-flight-model","text":"A simple, one-dimensional flight model is used to predict the HAB\u2019s flight profile in the vertical axis, including altitude, ascent rate, and ascent accelerations. Try it out!","title":"1D Atmospheric Flight Model"},{"location":"habtoolbox_1d-ascent-model/#1976-coesa-atmosphere-model","text":"The atmosphere model is an implementation of the 1976 COESA Atmosphere Model, used in Simulink as the COESA block from MATLAB\u2019s Aerospace Toolbox or the Python package Ambiance . Both methods approximate atmospheric temperature, pressure, and density using a piecewise curve fit for the layers of the atmosphere based on this standard model.","title":"1976 COESA Atmosphere Model"},{"location":"habtoolbox_1d-ascent-model/#limitations","text":"There are significant limitations to this atmosphere model, but it does well enough for us to get by. The model is not a function of humidity. The model does not account for differences due to the geographic location of the launch site such as latitude or local geography. The model does not account for local weather conditions, convection currents, disturbances, or wind currents. The layers of the atmosphere are modeled as discrete zones with discontinuities at fixed boundaries but the real layers of the atmosphere are continuous. Our approach to modeling the balloon\u2019s flight is an approximation anyway, and most of these limitations require more precision than a vertical-axis flight prediction would reasonably provide. We can still use this atmosphere model to understand the overarching forces that dominate the flight\u2019s ascent rate and altitude over time, accepting variations as noise. For more advanced applications that directly depend on atmospheric conditions such as altitude control, we need to design a system that can compensate for variations. By injecting random noise or random variations into the model\u2019s outputs, we can approximate the system\u2019s performance in response to changing weather or disturbances like convection.","title":"Limitations"},{"location":"habtoolbox_1d-ascent-model/#balloon-flight-model","text":"","title":"Balloon Flight Model"},{"location":"habtoolbox_1d-ascent-model/#assumptions-simplifications","text":"For this flight model, we are primarily interested in how the HAB changes altitude with time. Eventually, we might consider modeling the 3D flight path over time but for now, we\u2019ll table that for the future. By only considering the vertical axis we don\u2019t have to worry about the geographic location of the launch site as much, we can ignore lateral wind currents, and we reduce the coordinate frame from 3 axes to one axis. In short, the math gets a lot easier and there are much fewer variables to worry about. Assumption Justification We draw the control volume around the whole system (balloon, parachute, and payload) so that we are left with a point mass that reacts to atmospheric conditions. We ignore interactions between the balloon and the payload through the tether and treat it as a blob that has lighter-than-air gas in it and a bunch of dead weight. Rotating doesn\u2019t change the behavior of the blob, and the blob is too small to have differential effects from its size. We constrain the model to only the vertical axis, ignoring any lateral or rotational forces. This greatly simplifies our problem, distilling the system into a set of directly opposing forces in the vertical axis. We assume that the lift gas in the balloon is always at the same temperature and pressure as ambient air. Our model is not precise enough to account for thermodynamic effects caused by the balloon material, and at steady state the gas in the balloon will equalize to be close enough to ambient temperature and pressure that it\u2019s not worth taking into account. Drag only acts on the projected surface area from above looking down. Assume the balloon inflates as a sphere. We don't need to account for complicated aerodynamics. The size of the balloon is much larger than the size of the payload, so we can ignore the effects of drag on anything other than the balloon. When the balloon inflates it is not quite a sphere, but the true geometry is not close enough to account for differences. The lift gas behaves as an ideal gas. It's not worth the time or complexity to implement gas properties more in-depth than the Ideal Gas Law.","title":"Assumptions &amp; Simplifications"},{"location":"habtoolbox_1d-ascent-model/#forces-at-play","text":"","title":"Forces at Play"},{"location":"habtoolbox_1d-ascent-model/#buoyancy","text":"The buoyancy force comes from the difference in densities between the gas in the balloon and the volume of atmosphere it displaces. The balloon\u2019s volume This force accounts for the weight of the lift gas. buoyancy_force = balloon_volume * (lift_gas_density - air_density) * gravity Remember that gravity is a negative (downward) acceleration. We arrange the subtraction between densities so that the buoyancy force is positive (upward).","title":"Buoyancy"},{"location":"habtoolbox_1d-ascent-model/#weight","text":"Aside from the lift gas, the only force acting on the rest of the mass in our control volume is from gravity. Since the HAB flies at altitudes in excess of 30 km, we must account for changes in gravity with respect to altitude. standard_gravity = 9.80665 # [m/s^2] earth_mean_radius = 6.3781e6 # [m] gravity = standard_gravity * (earth_mean_radius / (earth_mean_radius + altitude))**2 weight = gravity * (balloon_mass + payload_mass)","title":"Weight"},{"location":"habtoolbox_1d-ascent-model/#drag","text":"Even though the buoyancy force is constantly greater than weight for the balloon to rise, the balloon does not accelerate constantly because there is drag from the air acting against the surface of the balloon. Drag always opposes the direction of motion. The volume (and therefore windward area) of the balloon changes with altitude. We assume the shape stays the same though, so the coefficient of drag does not change. balloon_radius = (balloon_volume * 3 / (4 * PI)) ** (1/3) windward_area = PI * (balloon_radius) ** 2 drag_force = 1/2 * (ascent_rate ** 2) * atmospheric_density * drag_coefficient * windward_area","title":"Drag"},{"location":"habtoolbox_1d-ascent-model/#sum-of-forces-net-force","text":"free body diagram The net force on the balloon-payload system is the sum of three primary forces: buoyancy, weight, and drag. Force as a function of Rationale Buoyancy mass of lift gas in the balloon, altitude Buoyancy is a function of the amount of lift gas in the balloon and the temperature, pressure, and density of the atmosphere. Using the COESA Atmosphere Model, temperature, pressure, and density of air are all functions of altitude only, so we can reduce the buoyancy force to be only a function of altitude. Drag mass of lift gas in the balloon, altitude, ascent rate Drag is a function of the windward area and velocity. Following the ideal gas law, the windward area can be derived from the volume of the balloon, and therefore from the amount of lift gas in the balloon and atmospheric conditions at a given temperature. Weight mass of everything other than lift gas, altitude The buoyancy force accounts for the mass of the lift gas, but the effect of gravity on every other part of the system still needs to be taken into account. The acceleration due to gravity changes as slightly as a function of altitude. Weight can be further divided up into which component is measured, like balloon mass, payload bus mass, payload electronics mass, et cetera.","title":"Sum of Forces / Net Force"},{"location":"habtoolbox_1d-ascent-model/#free-lift","text":"Free Lift is an alternative way to measure the lift from the balloon and is a handy way to make sure the balloon is filled to the right level or to calculate the ascent rate and other things with the HABHub Burst Calculator . Free lift measures the net amount of lift provided by the helium in units of kilograms. I like to think of free lift as being what a fish scale would read if you attached it to the payload and filled up the balloon. Effectively this is a measure of net force without the acceleration term.","title":"Free Lift"},{"location":"habtoolbox_1d-ascent-model/#balloon-parameters","text":"Parameters like the coefficient of drag and balloon mass are obtained from the balloon spec sheet from the manufacturer. If the volume of the lift gas exceeds the max volume listed in the spec sheet or the internal pressure exceeds the max listed pressure, we assume the balloon will burst. Likewise, the manufacturer provides a recommended Free Lift value for a given payload mass, which is used to calculate things like estimated max altitude. We use Kaymont high altitude balloons as a reference for balloon parameters.","title":"Balloon Parameters"},{"location":"mission_concept-selection/","text":"Concept Selection Concepts shown or adapted from this list may be included in the flight design of Nucleus. Which concepts make it in depends on the combined design effort required by their individual complexity, difficulty, expected cost, team expertise in related fields, novelty, and interest from the design team. Note Since Nucleus is a demonstrator for a flight platform, there is no limit to the complexity, cost, or difficulty of the experiments it supports. A concept is considered feasible, then, if Brickworks contributors decide that it is sufficiently interesting, novel, or within their pe1rsonal budgets for complexity, cost, and difficulty. Concepts vs. Requirements Concepts are ideas. Ideas lead to objectives, and requirements are derived to meet those objectives. It is important to remember that we use concepts like those listed in this section in order to organize the possible mission objectives and technology demonstrations, and later as guiding principles for deciding actual mission objectives and formulating design requirements from there. Selection Criteria Note Members of the Brickworks team were polled on what aspects of a HAB project motivate them and provide a fulfilling outlet for engineering skills. Mission concepts should be crafted to meet these criteria because engineers who take pride and genuine interest in a project do good work and stick with it until the end. By building a high altitude balloon, I want to... Improve my breadboarding and electrical engineering skills. Learn how to design a PCB. Finish a project, for once. Set an example for RIT Space Exploration projects. Work with my friends on an engineering project. Learn how to program an FPGA for real time image processing. Launch a HAB for the first time. Develop a novel design for a difficult problem. Publish elements of the design process and the results to the internet. Build something that can be positively shown to recruiters and future employers. keep my engineering skills sharp across many disciplines. Improve my analog engineering skills. Engineer cheap, COTS hardware to do the job that usually requires expensive or specialty hardware if you were to do it \"in the real world.\" Design a flexible platform that can be passed on to students. Implement improved tracking capabilities. Test subsystems until fully confident in launch capabilities. Have a mission where everything succeeds. Bring positive attention to RIT, RIT Space Exploration, and SPEXcast with media and blog posts. Mutually feed on each other\u2019s efforts & passions to keep momentum. Build the simplest concept that still satisfies my itch to do something novel and technical. Learn and practice proper documentation skills. Learn technologies I can\u2019t use at work, without the overhead of it being safe. Objective Criteria Complexity Complex systems are more prone to design errors, have more failure modes, and lead to overengineered solutions. Simple or elegent solutions are always preferred over complicated ones, when possible. Necessary complexity should be targeted and limited in scope. See also Difficulty . Cost This project is self funded out of our own pockets. Naturally, a lower cost is better. Potential for Future Work Engineering hours have the most \"bang-for-buck\" value on work that can be reused in future projects, or at least contributes to technical skills of the team (see also Personal Development ). Concepts that have a clear path for future work or use in a future project are preferred. Tiered Objectives The ability for a concept to be broken down into smaller ones is an important characteristic that can balance out Complexity . What we look for is to get the most value out of every engineering hour spent working on this project. So if a concept can be decomposed into smaller, independently useful modules, those engineering hours don't go to waste. Even better if the modules have Potential for Future Work . Objectives would be graduated by a combination of Complexity and Difficulty . Ideally, a concept would be split into tiered objectives that also serve as progression milestones. As long as the lowest tier objective is met, the HAB will fly. Higher tier objectives are progressively more ambitious and advanced. A tiered approach enables the best chance of success, so concepts that are more easily broken up into tiered objectives are preferred. Note Example of a system that is modular but not tiered : tlm module , avionics module , sensing module , nuclear fusion module . Here, if the super complex module fails we don't really have a payload or experiment of any sort. Example of a system that is modular and tiered : tlm , sensing , avionics , single axis spinning w/o controls (maybe just gas + valves), single axis spin control (add more complexity), 3 axis controls , propulsive landing . Where maybe that first leap into spinning is a checkpoint, and if we do that we hit our minimum objective. Lets say we hit the next one, single axis control , but when striving for 3-axis control we stall. That's okay, because we'd launch with the last checkpoint we achieved and still have a successful mission. Subjective Criteria Novelty Novel concepts are interesting and unique, two aspects which are desirable. It's the \"cool factor.\" Novelty is usually grouped with Complexity , but the two are independent--novel concepts need not be complex. Difficulty Difficulty is relative to one's prior training and expertise. The same problem which may be simple to an experienced engineer could be very difficult to a novice, especially if one is teaching themselves. Complicated designs are usually more difficult. Medium difficulty is preferred, as concepts are desired to be a challenge but not so difficult as to be unreasonable to accomplish. See also Personal Development . Personal Development One of the goals of this project is to serve as a vector for personal learning and development in technical skills, and professional development with a technical project. It is preferred if some but not all of the concepts of a design are in an area outside the team's expertise. This is coupled with Difficulty . Concept Selection Matrix A decision matrix is used to evaluate experiment mission concept feasibility in a systematic way. By separating objective and subjective criteria, we can judge concepts by their technological feasibility and personal interests independently. Each team member is also given the opportunity to weight the selection criteria based on personal preference. Normalizing the scores based on these weights may give a better reflection of which concept would be best to pursue. Every contributing member of Brickworks evaluated the list of experiment concepts on their own, then the team came together to review which experiments had the highest scores and made a selection together. The final concept selection is informed by the decision matrix, but not strictly bound to it. The master document with all decision matrices can be found here . Selected Experiments From the concept selection matrix and team discussion, the following experiments were selected for development: Advanced Dynamics Modelling Altitude Control On-board Image Processing Real-Time Communication (Stretch) Long Distance Communications (Stretch) Mission Monitoring Ground Station (Stretch) Launch Platform Tiered Mission Objectives In order to allow for iteration, experimentation, and stretch goals but still retain a roadmap for development, the experiments were divided into variants of increasing complexity, cost, and difficulty. The idea is to preserve a roadmap of development for planning purposes and to allow the formulation of broad design requirements, while also allowing the team to stretch for more ambitious goals in each area. There are also interdependencies between some of the experiments, especially as they get more advanced. Having \"tiered\" objectives lets development progress and iterate at different rates among experiments while also maintaining a sort of baseline for success. Below is an example diagram showing potential interdependencies and tiers of mission objectives. An epic of more ideas for mission objectives can be found here .","title":"Concept Selection"},{"location":"mission_concept-selection/#concept-selection","text":"Concepts shown or adapted from this list may be included in the flight design of Nucleus. Which concepts make it in depends on the combined design effort required by their individual complexity, difficulty, expected cost, team expertise in related fields, novelty, and interest from the design team. Note Since Nucleus is a demonstrator for a flight platform, there is no limit to the complexity, cost, or difficulty of the experiments it supports. A concept is considered feasible, then, if Brickworks contributors decide that it is sufficiently interesting, novel, or within their pe1rsonal budgets for complexity, cost, and difficulty.","title":"Concept Selection"},{"location":"mission_concept-selection/#concepts-vs-requirements","text":"Concepts are ideas. Ideas lead to objectives, and requirements are derived to meet those objectives. It is important to remember that we use concepts like those listed in this section in order to organize the possible mission objectives and technology demonstrations, and later as guiding principles for deciding actual mission objectives and formulating design requirements from there.","title":"Concepts vs. Requirements"},{"location":"mission_concept-selection/#selection-criteria","text":"Note Members of the Brickworks team were polled on what aspects of a HAB project motivate them and provide a fulfilling outlet for engineering skills. Mission concepts should be crafted to meet these criteria because engineers who take pride and genuine interest in a project do good work and stick with it until the end. By building a high altitude balloon, I want to... Improve my breadboarding and electrical engineering skills. Learn how to design a PCB. Finish a project, for once. Set an example for RIT Space Exploration projects. Work with my friends on an engineering project. Learn how to program an FPGA for real time image processing. Launch a HAB for the first time. Develop a novel design for a difficult problem. Publish elements of the design process and the results to the internet. Build something that can be positively shown to recruiters and future employers. keep my engineering skills sharp across many disciplines. Improve my analog engineering skills. Engineer cheap, COTS hardware to do the job that usually requires expensive or specialty hardware if you were to do it \"in the real world.\" Design a flexible platform that can be passed on to students. Implement improved tracking capabilities. Test subsystems until fully confident in launch capabilities. Have a mission where everything succeeds. Bring positive attention to RIT, RIT Space Exploration, and SPEXcast with media and blog posts. Mutually feed on each other\u2019s efforts & passions to keep momentum. Build the simplest concept that still satisfies my itch to do something novel and technical. Learn and practice proper documentation skills. Learn technologies I can\u2019t use at work, without the overhead of it being safe.","title":"Selection Criteria"},{"location":"mission_concept-selection/#objective-criteria","text":"","title":"Objective Criteria"},{"location":"mission_concept-selection/#complexity","text":"Complex systems are more prone to design errors, have more failure modes, and lead to overengineered solutions. Simple or elegent solutions are always preferred over complicated ones, when possible. Necessary complexity should be targeted and limited in scope. See also Difficulty .","title":"Complexity"},{"location":"mission_concept-selection/#cost","text":"This project is self funded out of our own pockets. Naturally, a lower cost is better.","title":"Cost"},{"location":"mission_concept-selection/#potential-for-future-work","text":"Engineering hours have the most \"bang-for-buck\" value on work that can be reused in future projects, or at least contributes to technical skills of the team (see also Personal Development ). Concepts that have a clear path for future work or use in a future project are preferred.","title":"Potential for Future Work"},{"location":"mission_concept-selection/#tiered-objectives","text":"The ability for a concept to be broken down into smaller ones is an important characteristic that can balance out Complexity . What we look for is to get the most value out of every engineering hour spent working on this project. So if a concept can be decomposed into smaller, independently useful modules, those engineering hours don't go to waste. Even better if the modules have Potential for Future Work . Objectives would be graduated by a combination of Complexity and Difficulty . Ideally, a concept would be split into tiered objectives that also serve as progression milestones. As long as the lowest tier objective is met, the HAB will fly. Higher tier objectives are progressively more ambitious and advanced. A tiered approach enables the best chance of success, so concepts that are more easily broken up into tiered objectives are preferred. Note Example of a system that is modular but not tiered : tlm module , avionics module , sensing module , nuclear fusion module . Here, if the super complex module fails we don't really have a payload or experiment of any sort. Example of a system that is modular and tiered : tlm , sensing , avionics , single axis spinning w/o controls (maybe just gas + valves), single axis spin control (add more complexity), 3 axis controls , propulsive landing . Where maybe that first leap into spinning is a checkpoint, and if we do that we hit our minimum objective. Lets say we hit the next one, single axis control , but when striving for 3-axis control we stall. That's okay, because we'd launch with the last checkpoint we achieved and still have a successful mission.","title":"Tiered Objectives"},{"location":"mission_concept-selection/#subjective-criteria","text":"","title":"Subjective Criteria"},{"location":"mission_concept-selection/#novelty","text":"Novel concepts are interesting and unique, two aspects which are desirable. It's the \"cool factor.\" Novelty is usually grouped with Complexity , but the two are independent--novel concepts need not be complex.","title":"Novelty"},{"location":"mission_concept-selection/#difficulty","text":"Difficulty is relative to one's prior training and expertise. The same problem which may be simple to an experienced engineer could be very difficult to a novice, especially if one is teaching themselves. Complicated designs are usually more difficult. Medium difficulty is preferred, as concepts are desired to be a challenge but not so difficult as to be unreasonable to accomplish. See also Personal Development .","title":"Difficulty"},{"location":"mission_concept-selection/#personal-development","text":"One of the goals of this project is to serve as a vector for personal learning and development in technical skills, and professional development with a technical project. It is preferred if some but not all of the concepts of a design are in an area outside the team's expertise. This is coupled with Difficulty .","title":"Personal Development"},{"location":"mission_concept-selection/#concept-selection-matrix","text":"A decision matrix is used to evaluate experiment mission concept feasibility in a systematic way. By separating objective and subjective criteria, we can judge concepts by their technological feasibility and personal interests independently. Each team member is also given the opportunity to weight the selection criteria based on personal preference. Normalizing the scores based on these weights may give a better reflection of which concept would be best to pursue. Every contributing member of Brickworks evaluated the list of experiment concepts on their own, then the team came together to review which experiments had the highest scores and made a selection together. The final concept selection is informed by the decision matrix, but not strictly bound to it. The master document with all decision matrices can be found here .","title":"Concept Selection Matrix"},{"location":"mission_concept-selection/#selected-experiments","text":"From the concept selection matrix and team discussion, the following experiments were selected for development: Advanced Dynamics Modelling Altitude Control On-board Image Processing Real-Time Communication (Stretch) Long Distance Communications (Stretch) Mission Monitoring Ground Station (Stretch) Launch Platform","title":"Selected Experiments"},{"location":"mission_concept-selection/#tiered-mission-objectives","text":"In order to allow for iteration, experimentation, and stretch goals but still retain a roadmap for development, the experiments were divided into variants of increasing complexity, cost, and difficulty. The idea is to preserve a roadmap of development for planning purposes and to allow the formulation of broad design requirements, while also allowing the team to stretch for more ambitious goals in each area. There are also interdependencies between some of the experiments, especially as they get more advanced. Having \"tiered\" objectives lets development progress and iterate at different rates among experiments while also maintaining a sort of baseline for success. Below is an example diagram showing potential interdependencies and tiers of mission objectives. An epic of more ideas for mission objectives can be found here .","title":"Tiered Mission Objectives"},{"location":"mission_concepts/","text":"Mission Concepts Nucleus was conceived as a payload-agnostic high altitude balloon architecture. In addition, Nucleus should host one or more technical or scientific experiments. These experiments serve as a means to validate the design and architecture while stressing the system in a real-world use case. List of Experiment Ideas Stable Imaging Platform / Bus Attitude Control Active gimbals make for a (power hungry) off-the-shelf solution for image stabilization. For a challenge one could build a gimballed camera mount from scratch. 1 A more novel idea would be to control bus attitude. A senior design team from 2017 attempted to do attitude control with a reaction wheel, but I don't think they had a way to dump momentum. A simpler (and more novel) approach would be to use RC aircraft engines or drone motors to actively counteract wind forces. A simpler objective could be using drone propellers for anti-spin control or active ballast weights for anti-rocking control. Pairs with: On-board Image Processing , Rocket Technology Testbed Altitude Control Actively change the ascent or descent rate. For a simpler demonstration, only control the ascent rate. For a challenge, maintain an altitude set point. For a greater challenge, extend the flight duration by controlling altitude. 2 Pairs with: Intra-balloon Environment Sensors Intra-balloon Environment Sensors Develop a sensor platform to measure environmental conditions (temperature, pressure, humidity) within the balloon from ambient, through filling, and finally through the burst event. Send the data to the main payload storage over a wired or wireless link. As a stretch goal, instrument the bus with environmental sensors. Compare balloon internal conditions to ambient ones add correlate it with altitude rate of change or burst events. Pairs with: Altitude Control , Characterize Atmospheric Composition , Model and Test Latex Balloon Burst Conditions On-board Image Processing Perform image processing (of any level) on images or video on the payload electronics in flight. 3 For an extra challenge, apply any of the following constraints: Payload electronics do not exceed $30. Image processing algorithms have a practical or scientific usebeyond a simple demonstrator. Image processing takes place on an FPGA. Bonus if it occurs in realtime. Image processing includes data fusion with additional sensors orcamera sources. Pairs with: Stable Imaging Platform / Bus Attitude Control Real-time Data Transfer Receive real time telemetry and payload data in flight. For a greater challenge, send commands from a ground station during the flight. For a simple demonstration, send limited health and status telemetry. As a stretch, send rich data (like photos or live video) to a ground station in flight. Pairs with: Intra-balloon Environment Sensors , Characterize Atmospheric Composition , Characterize Radiation Environment , Altitude Control , Stable Imaging Platform / Bus Attitude Control , Rocket Technology Testbed Characterize Atmospheric Composition Measure atmospheric composition along the balloon's ascent. Characterize how composition changes with altitude. For a greater challenge, use multiple flights to see how composition changes with altitude from different geographic locations, time of day, time of year, or different weather conditions. Pairs with: Altitude Control , Intra-balloon Environment Sensors Characterize Radiation Environment Measure radiation intensity along the balloon's ascent. Characterize how intensity changes with altitude. For a greater challenge, use multiple flights to see how intensity changes with altitude from different geographic locations, time of day, time of year, or different weather conditions. Pairs with: Altitude Control , Intra-balloon Environment Sensors Model and Test Latex Balloon Burst Conditions Prior to launch, predict the conditions that lead to the balloon's burst event. Instrument the payload and balloon to test the model in flight. For an extra challenge, apply any of the following constraints: Model the burst event only using parameters that can be measured in flight. Test the model on the ground with simulated atmospheric conditions and a sub- or full-scale balloon. Record high-speed video of the balloon bursting in flight. Pairs with: Intra-balloon Environment Sensors Controlled Descent After balloon cutdown, control the descent of the payload. For a simpler challenge, use a reefed parachute. For a greater challenge, steer the descent path using a parafoil or aero control surfaces. Pairs with: Rocket Technology Testbed , Advanced Dynamics Modelling Vegetation Density Experiment Measure vegetation density using NDVI with cameras in flight. For a greater challenge, do the image processing on-board. 4 Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing F' Flight Software Ecosystem F' (F Prime) is a component-driven framework that enables rapid development and deployment of spaceflight and other embedded software applications. 5 F' is part of NASA Jet Propultion Lab's technology ecosystem, open source, and also has demos that are meant to be run on a Raspberry Pi. F' can be used to create common HAB flight software leveraging existing components. The team will create additional components to meet the needs of specific HABs, with the ability to open source for use by other HAB teams. Run HAB FSW with F' using a one off greedy customization, not going out of the way for code reuse. Design HAB FSW with F' to be common and for use by other HAB teams as a base. Design hardware payloads with accompanying F' components to be common for use by teams that want a plug and play HAB payload. Pairs with: Long Distance Communications Send or receive data to the HAB in flight while it is beyond visual range. For a greater challenge, send or receive data while the HAB is beyond the geographical horizon of the ground station. Pairs with: Real-time Data Transfer Multispectral / Hyperspectral Instrument Image the Earth, sky, or atmospheric limb with a camera sensitive to two or more spectral bands. Optionally apply any of the following constraints: Use components which cost no more than $50. 6 Calibrate the instrument on the ground (optionally in flight-like conditions) Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing , Vegetation Density Experiment Star Tracker Build an instrument that measures position of the payload bus based on optical measurements of the sky. 7 8 Optionally apply any of the following constraints: Use components which cost no more than $50. Calibrate the instrument on the ground (optionally in flight-like conditions) Implement a custom algorithm to derive orientation from images of the sky. Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing Synthetic Image Quality Enhancement Use computer vision techniques to improve the effective resolution of images by either of the following methods: Stitch multiple image frames into a larger composite image of an area wider than the camera's field of view. 9 Use multi-frame super-resolution algorithms to create high resolution image products from low resolution images captured in flight. 10 11 Pairs with : Stable Imaging Platform / Bus Attitude Control , On-board Image Processing Advanced Dynamics Modelling Create a dynamics model for the HAB bus that accounts for differential drag bus geometry, variable wind speed and direction, variable ambient pressure, twist and tension from the balloon tether, and the center of gravity of the bus or mass and location of internal components. If attitude control is also under consideration, also model the effects of that control system and simulate its behavior in different situations. Pairs with: Stable Imaging Platform / Bus Attitude Control , Altitude Control , Controlled Descent , Flight Conditions Characterizer , Mission Monitoring Ground Station Monitor telemetry in flight or during tests and display telemetry and other information with an intuitive user interface. For a greater challenge, also implement command and control elements. Examples of UI elements that could be used are: Live-updating plots of telemetry values over time Live-updating log messages from the avionics Live video feeds from cameras on board Command and control interfaces for sending messages to the vehicle Pairs with: Real-time Data Transfer Mothership for Smaller Vehicles Stow smaller vehicles such as tiny quadcopters on the HAB and release them in flight. For a greater challenge, use the HAB as a relay for recording data or sending data from the child vehicles back to Mission Control. Pairs with: Real-time Data Transfer , Long Distance Communications Sprawled Small Scale HABs Design and build a small scale HAB (50 grams) which includes a downward facing camera. The small scale HABs should be able to function for at least a few hours, this includes power on time and storage requirements. Multiple of these small scale HABs will be connected together with lightweight wire or string. The collective HABs can be used to map out the terrain over large distances as connections between individual HABs will be lengthy (maybe 500m - 1km). Pairs with: Vegetation Density Experiment Launch Platform Develop a launch platform system capable of controlling the payload during launch preparations. Includes clamp system to retain payload to the ground during launch preparation. Data/Power/Fueling connections available to interface with the payload. System would allow for hands off approach during setup from filling the balloon to last minute software updates and real time telemetry without relying on onboard radios. Design can be tiered, for example power and data would be primary goal and fueling cabilities as a stretch goal. Pairs with: Mission Monitoring Ground Station Balloon Movement Sensors Develop a sensor platform to measure inertial movement of balloon (acceleration, rotation, magnetic heading) through full flight of balloon. Send the data to the main payload storage over a wired or wireless link. Correlate data with similar sensors on the HAB bus to create better stabilization algorithms and control methods. Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing , Intra-balloon Environment Sensors Reference Missions This section outlines reference payloads and mission profiles for Nucleus which satisfy the main mission objective of demonstrating the avionics architecture by supporting a combination of technical or scientific experiments. Vegetation Density Mapper The spiritual successor to Where U At Plants? and Phil's vision for HAB CV . Mount at least two ground-facing cameras to the HAB payload. Collect photos or videos of the ground in the Red and Near-Infrared spectral bands as needed to compute NDVI on the ground below. Calibrate spectral response and lens distortion of all payload cameras on the ground before flight. Experiments (Level I): Vegetation Density Experiment : Record flight data (GPS coordinates, altitude, orientation) in sync with image captures. Use flight data, camera field of view, and image data to project image data onto a map. Flight data and imagery is stored to local memory. All data processing and analysis takes place after flight data is recovered. Experiments (Level II): On-board Image Processing : Perform data processing (linking flight data to imagery) and analysis (compute NDVI) on-board during the flight. Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Experiments (Level III): Stable Imaging Platform / Bus Attitude Control : Use active control systems and actuators (reaction mass, ballast, electric motors, thrust) to stabilize the platform where the payload cameras are mounted. In addition to control actuators, pointing knowledge is necessary to feed the control system. Flight Conditions Characterizer A knowledge-gathering mission to inform flight characteristics and environments on future HAB flights. Instrument the HAB bus to measure ambient conditions, internal conditions within the bus structure, and internal conditions within the balloon over a long-duration flight to gain detailed insights into the conditions subjected to the hardware. Calibrate all sensors on the ground in known conditions, ideally with an environmental test chamber, prior to the flight. Experiments (Level I): Characterize Atmospheric Composition : Measure temperature, humidity, pressure, and composition of the air over the course of the flight. Characterize Radiation Environment : Measure ionizing radiation flux (using a geiger counter) over the course of the flight. Advanced Dynamics Modelling : Model the dynamics of the flight and validate the model with flight data. Experiments (Level II): Intra-balloon Environment Sensors : Measure temperature, humidity, pressure and density of helium within the balloon. Also measure detailed thermal gradients throughout the payload bus and components. Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Model and Test Latex Balloon Burst Conditions : Model and test (on the ground) the conditions that lead to the balloon's burst event. Instrument the balloon and payload to validate this model and characterize the burst event in detail. Experiments (Level III): Altitude Control : Maintain flight at certain altitude(s) to gain more data about the conditions at that height in order to smooth out outliers and variations. Optionally extend mission flight time to gain more data. Flying Robot A knowledge-building mission that develops key building blocks toward satellite-like operations tasks such as command and control, data links, and ACS systems (like detumbling). Send commands from a ground station that are executed by the HAB in flight. The HAB reacts to both command instructions and stimuli from its environment. Experiments (Level I): Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Execute commands sent from a ground station and report acknowledgement of a received command to the ground. Experiments (Level II): Controlled Descent : Automatically detect a free-fall state and use active controls and actuators (parafoil, control surfaces) to change the speed and direction of descent. Descent should be controlled in a way that makes recovery of the payload easier. Experiments (Level III): Altitude Control : Maintain a set altitude in flight and change the altitude set point in response to a command from the ground station. Stable Imaging Platform / Bus Attitude Control : Maintain a set attitude (of the imaging platform) and change the target attitude in response to a command from the ground station. Rocket Technology Testbed A technology demonstration mission for key technologies meant for use with rockets. Develop avionics, logic, and other foundational technologies for controls, telemetry, and ground stations using requirements based on what would be used in an M-class hobby rocket. Select experiments that can be demonstrated on a HAB and easily adapted for flight in a rocket. Experiments (Level I): Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Experiments (Level II): Controlled Descent : Automatically detect a free-fall state and use active controls and actuators (parafoil, control surfaces) to change the speed and direction of descent. Descent should be controlled in a way that makes recovery of the payload easier. Advanced Dynamics Modelling : Model the dynamics of the flight and validate the model with flight data. Experiments (Level III): Stable Imaging Platform / Bus Attitude Control : Use active control systems and actuators (reaction mass, ballast, control surfaces, or thrust) to stabilize the roll axis (the axis along the balloon tension line) during ascent and/or descent. In addition to control actuators, pointing knowledge is necessary to feed the control system. Special preference should be given to propulsive systems or aero control surfaces that could also be adapted for use during a rocket's ascent phase. Haumpton, Shane. 2018. How to create a DIY gimbal stabilizer . DIY Photography. \u21a9 Sushko, Audrey, et. al. 2017. Low Cost, High Endurance, Altitude-Controlled Latex Balloon for Near-Space Research (ValBal) . Standford Space Initiative. \u21a9 Linden, Philip, et. al. 2018. On-Board Image Processing and Computer Vision Techniques on Low-Cost Consumer Electronics for Vegetation Density Mapping and Other Experiments . RIT Space Exploration. \u21a9 Linden, Philip. 2018. Where U At Plants? (WUAP): Capturing and Masking Images from Raspberry Pi 3 + Pi Camera . RIT Space Exploration. \u21a9 NASA Jet Propulsion Lab. 2020. F\u00b4: A Flight-Proven, Multi-Platform, Open-Source Flight Software Framework . GitHub. \u21a9 Sigernes, Fred, et. al. . 2018. Do it yourself hyperspectral imager for handheld to airborne operations . Optics Express. \u21a9 McBryde, Christopher Ryan. 2012. A star tracker design for CubeSats . University of Texas at Austin. \u21a9 Smith, Casey Grant. 2017. Development and implementation of star tracker based attitude determination . Missouri University of Science and Technology. \u21a9 Szeliski, Richard. 2006. Image Alignment and Stitching: A Tutorial . Foundations and Trends in Computer Graphics and Vision. \u21a9 Nelson, Kyle, et. al. 2012. Performance Evaluation of Multi-Frame Super-Resolution Algorithms . IEEE. \u21a9 Farsiu, Sina, et. al . 2004. Fast and robust multiframe super resolution . IEEE. \u21a9","title":"Mission Concepts"},{"location":"mission_concepts/#mission-concepts","text":"Nucleus was conceived as a payload-agnostic high altitude balloon architecture. In addition, Nucleus should host one or more technical or scientific experiments. These experiments serve as a means to validate the design and architecture while stressing the system in a real-world use case.","title":"Mission Concepts"},{"location":"mission_concepts/#list-of-experiment-ideas","text":"","title":"List of Experiment Ideas"},{"location":"mission_concepts/#stable-imaging-platform-bus-attitude-control","text":"Active gimbals make for a (power hungry) off-the-shelf solution for image stabilization. For a challenge one could build a gimballed camera mount from scratch. 1 A more novel idea would be to control bus attitude. A senior design team from 2017 attempted to do attitude control with a reaction wheel, but I don't think they had a way to dump momentum. A simpler (and more novel) approach would be to use RC aircraft engines or drone motors to actively counteract wind forces. A simpler objective could be using drone propellers for anti-spin control or active ballast weights for anti-rocking control. Pairs with: On-board Image Processing , Rocket Technology Testbed","title":"Stable Imaging Platform / Bus Attitude Control"},{"location":"mission_concepts/#altitude-control","text":"Actively change the ascent or descent rate. For a simpler demonstration, only control the ascent rate. For a challenge, maintain an altitude set point. For a greater challenge, extend the flight duration by controlling altitude. 2 Pairs with: Intra-balloon Environment Sensors","title":"Altitude Control"},{"location":"mission_concepts/#intra-balloon-environment-sensors","text":"Develop a sensor platform to measure environmental conditions (temperature, pressure, humidity) within the balloon from ambient, through filling, and finally through the burst event. Send the data to the main payload storage over a wired or wireless link. As a stretch goal, instrument the bus with environmental sensors. Compare balloon internal conditions to ambient ones add correlate it with altitude rate of change or burst events. Pairs with: Altitude Control , Characterize Atmospheric Composition , Model and Test Latex Balloon Burst Conditions","title":"Intra-balloon Environment Sensors"},{"location":"mission_concepts/#on-board-image-processing","text":"Perform image processing (of any level) on images or video on the payload electronics in flight. 3 For an extra challenge, apply any of the following constraints: Payload electronics do not exceed $30. Image processing algorithms have a practical or scientific usebeyond a simple demonstrator. Image processing takes place on an FPGA. Bonus if it occurs in realtime. Image processing includes data fusion with additional sensors orcamera sources. Pairs with: Stable Imaging Platform / Bus Attitude Control","title":"On-board Image Processing"},{"location":"mission_concepts/#real-time-data-transfer","text":"Receive real time telemetry and payload data in flight. For a greater challenge, send commands from a ground station during the flight. For a simple demonstration, send limited health and status telemetry. As a stretch, send rich data (like photos or live video) to a ground station in flight. Pairs with: Intra-balloon Environment Sensors , Characterize Atmospheric Composition , Characterize Radiation Environment , Altitude Control , Stable Imaging Platform / Bus Attitude Control , Rocket Technology Testbed","title":"Real-time Data Transfer"},{"location":"mission_concepts/#characterize-atmospheric-composition","text":"Measure atmospheric composition along the balloon's ascent. Characterize how composition changes with altitude. For a greater challenge, use multiple flights to see how composition changes with altitude from different geographic locations, time of day, time of year, or different weather conditions. Pairs with: Altitude Control , Intra-balloon Environment Sensors","title":"Characterize Atmospheric Composition"},{"location":"mission_concepts/#characterize-radiation-environment","text":"Measure radiation intensity along the balloon's ascent. Characterize how intensity changes with altitude. For a greater challenge, use multiple flights to see how intensity changes with altitude from different geographic locations, time of day, time of year, or different weather conditions. Pairs with: Altitude Control , Intra-balloon Environment Sensors","title":"Characterize Radiation Environment"},{"location":"mission_concepts/#model-and-test-latex-balloon-burst-conditions","text":"Prior to launch, predict the conditions that lead to the balloon's burst event. Instrument the payload and balloon to test the model in flight. For an extra challenge, apply any of the following constraints: Model the burst event only using parameters that can be measured in flight. Test the model on the ground with simulated atmospheric conditions and a sub- or full-scale balloon. Record high-speed video of the balloon bursting in flight. Pairs with: Intra-balloon Environment Sensors","title":"Model and Test Latex Balloon Burst Conditions"},{"location":"mission_concepts/#controlled-descent","text":"After balloon cutdown, control the descent of the payload. For a simpler challenge, use a reefed parachute. For a greater challenge, steer the descent path using a parafoil or aero control surfaces. Pairs with: Rocket Technology Testbed , Advanced Dynamics Modelling","title":"Controlled Descent"},{"location":"mission_concepts/#vegetation-density-experiment","text":"Measure vegetation density using NDVI with cameras in flight. For a greater challenge, do the image processing on-board. 4 Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing","title":"Vegetation Density Experiment"},{"location":"mission_concepts/#f-flight-software-ecosystem","text":"F' (F Prime) is a component-driven framework that enables rapid development and deployment of spaceflight and other embedded software applications. 5 F' is part of NASA Jet Propultion Lab's technology ecosystem, open source, and also has demos that are meant to be run on a Raspberry Pi. F' can be used to create common HAB flight software leveraging existing components. The team will create additional components to meet the needs of specific HABs, with the ability to open source for use by other HAB teams. Run HAB FSW with F' using a one off greedy customization, not going out of the way for code reuse. Design HAB FSW with F' to be common and for use by other HAB teams as a base. Design hardware payloads with accompanying F' components to be common for use by teams that want a plug and play HAB payload. Pairs with:","title":"F' Flight Software Ecosystem"},{"location":"mission_concepts/#long-distance-communications","text":"Send or receive data to the HAB in flight while it is beyond visual range. For a greater challenge, send or receive data while the HAB is beyond the geographical horizon of the ground station. Pairs with: Real-time Data Transfer","title":"Long Distance Communications"},{"location":"mission_concepts/#multispectral-hyperspectral-instrument","text":"Image the Earth, sky, or atmospheric limb with a camera sensitive to two or more spectral bands. Optionally apply any of the following constraints: Use components which cost no more than $50. 6 Calibrate the instrument on the ground (optionally in flight-like conditions) Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing , Vegetation Density Experiment","title":"Multispectral / Hyperspectral Instrument"},{"location":"mission_concepts/#star-tracker","text":"Build an instrument that measures position of the payload bus based on optical measurements of the sky. 7 8 Optionally apply any of the following constraints: Use components which cost no more than $50. Calibrate the instrument on the ground (optionally in flight-like conditions) Implement a custom algorithm to derive orientation from images of the sky. Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing","title":"Star Tracker"},{"location":"mission_concepts/#synthetic-image-quality-enhancement","text":"Use computer vision techniques to improve the effective resolution of images by either of the following methods: Stitch multiple image frames into a larger composite image of an area wider than the camera's field of view. 9 Use multi-frame super-resolution algorithms to create high resolution image products from low resolution images captured in flight. 10 11 Pairs with : Stable Imaging Platform / Bus Attitude Control , On-board Image Processing","title":"Synthetic Image Quality Enhancement"},{"location":"mission_concepts/#advanced-dynamics-modelling","text":"Create a dynamics model for the HAB bus that accounts for differential drag bus geometry, variable wind speed and direction, variable ambient pressure, twist and tension from the balloon tether, and the center of gravity of the bus or mass and location of internal components. If attitude control is also under consideration, also model the effects of that control system and simulate its behavior in different situations. Pairs with: Stable Imaging Platform / Bus Attitude Control , Altitude Control , Controlled Descent , Flight Conditions Characterizer ,","title":"Advanced Dynamics Modelling"},{"location":"mission_concepts/#mission-monitoring-ground-station","text":"Monitor telemetry in flight or during tests and display telemetry and other information with an intuitive user interface. For a greater challenge, also implement command and control elements. Examples of UI elements that could be used are: Live-updating plots of telemetry values over time Live-updating log messages from the avionics Live video feeds from cameras on board Command and control interfaces for sending messages to the vehicle Pairs with: Real-time Data Transfer","title":"Mission Monitoring Ground Station"},{"location":"mission_concepts/#mothership-for-smaller-vehicles","text":"Stow smaller vehicles such as tiny quadcopters on the HAB and release them in flight. For a greater challenge, use the HAB as a relay for recording data or sending data from the child vehicles back to Mission Control. Pairs with: Real-time Data Transfer , Long Distance Communications","title":"Mothership for Smaller Vehicles"},{"location":"mission_concepts/#sprawled-small-scale-habs","text":"Design and build a small scale HAB (50 grams) which includes a downward facing camera. The small scale HABs should be able to function for at least a few hours, this includes power on time and storage requirements. Multiple of these small scale HABs will be connected together with lightweight wire or string. The collective HABs can be used to map out the terrain over large distances as connections between individual HABs will be lengthy (maybe 500m - 1km). Pairs with: Vegetation Density Experiment","title":"Sprawled Small Scale HABs"},{"location":"mission_concepts/#launch-platform","text":"Develop a launch platform system capable of controlling the payload during launch preparations. Includes clamp system to retain payload to the ground during launch preparation. Data/Power/Fueling connections available to interface with the payload. System would allow for hands off approach during setup from filling the balloon to last minute software updates and real time telemetry without relying on onboard radios. Design can be tiered, for example power and data would be primary goal and fueling cabilities as a stretch goal. Pairs with: Mission Monitoring Ground Station","title":"Launch Platform"},{"location":"mission_concepts/#balloon-movement-sensors","text":"Develop a sensor platform to measure inertial movement of balloon (acceleration, rotation, magnetic heading) through full flight of balloon. Send the data to the main payload storage over a wired or wireless link. Correlate data with similar sensors on the HAB bus to create better stabilization algorithms and control methods. Pairs with: Stable Imaging Platform / Bus Attitude Control , On-board Image Processing , Intra-balloon Environment Sensors","title":"Balloon Movement Sensors"},{"location":"mission_concepts/#reference-missions","text":"This section outlines reference payloads and mission profiles for Nucleus which satisfy the main mission objective of demonstrating the avionics architecture by supporting a combination of technical or scientific experiments.","title":"Reference Missions"},{"location":"mission_concepts/#vegetation-density-mapper","text":"The spiritual successor to Where U At Plants? and Phil's vision for HAB CV . Mount at least two ground-facing cameras to the HAB payload. Collect photos or videos of the ground in the Red and Near-Infrared spectral bands as needed to compute NDVI on the ground below. Calibrate spectral response and lens distortion of all payload cameras on the ground before flight. Experiments (Level I): Vegetation Density Experiment : Record flight data (GPS coordinates, altitude, orientation) in sync with image captures. Use flight data, camera field of view, and image data to project image data onto a map. Flight data and imagery is stored to local memory. All data processing and analysis takes place after flight data is recovered. Experiments (Level II): On-board Image Processing : Perform data processing (linking flight data to imagery) and analysis (compute NDVI) on-board during the flight. Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Experiments (Level III): Stable Imaging Platform / Bus Attitude Control : Use active control systems and actuators (reaction mass, ballast, electric motors, thrust) to stabilize the platform where the payload cameras are mounted. In addition to control actuators, pointing knowledge is necessary to feed the control system.","title":"Vegetation Density Mapper"},{"location":"mission_concepts/#flight-conditions-characterizer","text":"A knowledge-gathering mission to inform flight characteristics and environments on future HAB flights. Instrument the HAB bus to measure ambient conditions, internal conditions within the bus structure, and internal conditions within the balloon over a long-duration flight to gain detailed insights into the conditions subjected to the hardware. Calibrate all sensors on the ground in known conditions, ideally with an environmental test chamber, prior to the flight. Experiments (Level I): Characterize Atmospheric Composition : Measure temperature, humidity, pressure, and composition of the air over the course of the flight. Characterize Radiation Environment : Measure ionizing radiation flux (using a geiger counter) over the course of the flight. Advanced Dynamics Modelling : Model the dynamics of the flight and validate the model with flight data. Experiments (Level II): Intra-balloon Environment Sensors : Measure temperature, humidity, pressure and density of helium within the balloon. Also measure detailed thermal gradients throughout the payload bus and components. Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Model and Test Latex Balloon Burst Conditions : Model and test (on the ground) the conditions that lead to the balloon's burst event. Instrument the balloon and payload to validate this model and characterize the burst event in detail. Experiments (Level III): Altitude Control : Maintain flight at certain altitude(s) to gain more data about the conditions at that height in order to smooth out outliers and variations. Optionally extend mission flight time to gain more data.","title":"Flight Conditions Characterizer"},{"location":"mission_concepts/#flying-robot","text":"A knowledge-building mission that develops key building blocks toward satellite-like operations tasks such as command and control, data links, and ACS systems (like detumbling). Send commands from a ground station that are executed by the HAB in flight. The HAB reacts to both command instructions and stimuli from its environment. Experiments (Level I): Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Execute commands sent from a ground station and report acknowledgement of a received command to the ground. Experiments (Level II): Controlled Descent : Automatically detect a free-fall state and use active controls and actuators (parafoil, control surfaces) to change the speed and direction of descent. Descent should be controlled in a way that makes recovery of the payload easier. Experiments (Level III): Altitude Control : Maintain a set altitude in flight and change the altitude set point in response to a command from the ground station. Stable Imaging Platform / Bus Attitude Control : Maintain a set attitude (of the imaging platform) and change the target attitude in response to a command from the ground station.","title":"Flying Robot"},{"location":"mission_concepts/#rocket-technology-testbed","text":"A technology demonstration mission for key technologies meant for use with rockets. Develop avionics, logic, and other foundational technologies for controls, telemetry, and ground stations using requirements based on what would be used in an M-class hobby rocket. Select experiments that can be demonstrated on a HAB and easily adapted for flight in a rocket. Experiments (Level I): Real-time Data Transfer : Downlink all or part of the data to a ground station while in flight. Experiments (Level II): Controlled Descent : Automatically detect a free-fall state and use active controls and actuators (parafoil, control surfaces) to change the speed and direction of descent. Descent should be controlled in a way that makes recovery of the payload easier. Advanced Dynamics Modelling : Model the dynamics of the flight and validate the model with flight data. Experiments (Level III): Stable Imaging Platform / Bus Attitude Control : Use active control systems and actuators (reaction mass, ballast, control surfaces, or thrust) to stabilize the roll axis (the axis along the balloon tension line) during ascent and/or descent. In addition to control actuators, pointing knowledge is necessary to feed the control system. Special preference should be given to propulsive systems or aero control surfaces that could also be adapted for use during a rocket's ascent phase. Haumpton, Shane. 2018. How to create a DIY gimbal stabilizer . DIY Photography. \u21a9 Sushko, Audrey, et. al. 2017. Low Cost, High Endurance, Altitude-Controlled Latex Balloon for Near-Space Research (ValBal) . Standford Space Initiative. \u21a9 Linden, Philip, et. al. 2018. On-Board Image Processing and Computer Vision Techniques on Low-Cost Consumer Electronics for Vegetation Density Mapping and Other Experiments . RIT Space Exploration. \u21a9 Linden, Philip. 2018. Where U At Plants? (WUAP): Capturing and Masking Images from Raspberry Pi 3 + Pi Camera . RIT Space Exploration. \u21a9 NASA Jet Propulsion Lab. 2020. F\u00b4: A Flight-Proven, Multi-Platform, Open-Source Flight Software Framework . GitHub. \u21a9 Sigernes, Fred, et. al. . 2018. Do it yourself hyperspectral imager for handheld to airborne operations . Optics Express. \u21a9 McBryde, Christopher Ryan. 2012. A star tracker design for CubeSats . University of Texas at Austin. \u21a9 Smith, Casey Grant. 2017. Development and implementation of star tracker based attitude determination . Missouri University of Science and Technology. \u21a9 Szeliski, Richard. 2006. Image Alignment and Stitching: A Tutorial . Foundations and Trends in Computer Graphics and Vision. \u21a9 Nelson, Kyle, et. al. 2012. Performance Evaluation of Multi-Frame Super-Resolution Algorithms . IEEE. \u21a9 Farsiu, Sina, et. al . 2004. Fast and robust multiframe super resolution . IEEE. \u21a9","title":"Rocket Technology Testbed"},{"location":"pdr_altitudecontrol/","text":"Altitude Control Logic Lead: Philip Linden Overview : The scope of this PDR covers the logic and operations of the altitude controller system on the HAB, including arm and disarm criteria, approach for calculating when to actuate controllers, and risk mitigation strategies. The design of actuation mechanisms and electronic components are discussed in Mechanical Systems and Flight Avionics Hardware , respectively. Objective : Actively control the weight and buoyancy of the HAB in order to maintain equilibrium at a prescribed altitude. Approach Normally the balloon is filled with lifting gas so that it rises with the payload until it reaches an altitude where the ambient temperature and pressure cause the balloon to expand beyond its limits and it bursts. Without active control, flight time can be increased by filling the balloon with just enough lift gas to be at equilibrium at the target altitude, but this is difficult for several reasons: The actual temperature and pressure at the target altitude are at best roughly approximated by models, even when accounting for the latest weather forecast. Temperature and pressure are not constant at the target altitude, so even if there was a perfectly measured amount of lift gas to be at equilibrium for a specific temperature and pressure band, it wouldn\u2019t follow a target altitude. Filling the balloon with less gas would mean it takes longer for the HAB to reach the target altitude. The HAB\u2019s altitude is a function of two opposing forces: the upward buoyancy force and the weight of the balloon-payload system. Critically, both are directly influenced by something we can control. Buoyancy is a function of the amount of lift gas in the balloon, and weight is a function of the mass of the payload. Thus we can design a closed-loop control algorithm to change the balance of these two forces by bleeding lift gas from the balloon or dropping ballast mass from the payload based on the measured altitude in order to converge to some target altitude. This addresses a number of issues encountered with passive flight: Dynamic feedback control allows the balloon to maintain equilibrium at a target altitude through changing temperatures and pressures. Open-loop control of lifting gas allows the balloon to be overfilled at launch, rising to the target altitude quickly and then bleeding gas from the balloon until equilibrium is achieved. In order for the controller to converge to a geometric altitude, it must use a non-atmospheric reference like GPS altitude. Barometric altimeters measure pressure, which is calibrated to isobaric layers of a standard reference atmosphere. Primary mode : GPS altitude hold. Secondary mode : Isobaric altitude hold. Concept of Operations Wait for a controller enable to be sent. Disarm the controller when the avionics boot up. During pre-launch, operators enable the controller. Disarm the controller unless when all of the following conditions are met: A controller enable command has been received since the last boot or the last controller disable command. The control error has crossed zero at least once (i.e., the HAB\u2019s altitude has risen above the target altitude at least once). There is ballast mass remaining in the reservoir. Calibrate the mass flow rate at the ballast release valve prior to flight and keep a tally of remaining ballast mass. There is enough lifting gas in the balloon for the HAB to rise if the reservoir were empty. Use a pressure sensor in the balloon to compute the mass flow rate at the bleed valve from the gauge pressure and temperature of lifting gas inside the balloon and keep a tally of remaining lifting gas. Use a tuned PI control to drive a ballast release valve and a gas bleed valve. The controller is designed for disturbance rejection of a noisy altitude signal. In order to conserve control effort, we must tune the controller such that overshoot and oscillations are minimized. Response time and settling time should be tuned to be small compared to flight time, but can still be on the order of ~1 hour. Control loop PWM frequency is tuned to be much faster than the response time. GPS altitude hold (Stabilize): Enter stabilize control mode when the controller is armed and remain in this mode until ascent rate and/or altitude error are greater than the allowable bounds. Use GPS altitude to converge to a geometric altitude that may cross isobaric layer boundaries. This control mode uses more control mass than barometric altitude hold so it should not be used for extended periods of time. Use this control mode during the stabilize phase to quickly approach the target altitude. Barometric altitude hold (Cruise): Once the vehicle is near the target altitude and has reached a steady state, transition to cruise mode to maintain an altitude near the target for an extended period of time. Use barometric altitude to equalize to an isobaric layer of the atmosphere corresponding to a calibrated approximate altitude. This control mode uses less control mass because it is able to equalize the balloon pressure to ambient pressure and \u201cride\u201d isobaric layers of atmosphere. Hold an isobaric altitude during the cruise phase in order to conserve control mass. If the controller is still armed and the altitude error exceeds the allowable range, transition from cruise to stabilize and then repeat this algorithm until the controller is disarmed. When the controller is disarmed, dump all remaining ballast. Lock the ballast valve in the open position. Lock the bleed valve in the closed position. PID Control In order to dynamically determine how much to bleed or ballast, we implement a PID controller to determine the percentage of time of each control cycle to keep the bleed or ballast valve open. This is also referred to as PWM control with a PID algorithm. The PID control algorithm works by modulating the inputs, u, to the Plant, which in our case means the bleed and ballast controls. The Plant is the physical response, so the balance of weight, buoyancy, and drag forces with the given mass properties and ambient conditions. (See 1D Atmospheric Flight Model ) The output of the Plant is the actual altitude, y . For a given set point altitude, r , the PID controller attempts to reduce the error, e=r-y , to zero. The PID controller consists of a set of gains applied to a proportional term, an integral term, and a derivative term that all operate on the error signal, e . These gains are tuned to get the desired response from the controller. Rules of thumb Proportional gain : How aggressively signal approaches setpoint. Too much causes overshoot. No impact on steady-state error. Integral gain : How much error matters over time. Reduces oscillations and steady-state errors. Prone to windup, where accumulated errors over a long time cause lag in the controller after it reaches the desired point. Derivative gain : How much rate of change matters. Reduces overshoot. Prone to oscillations. Noisy signals make it go crazy, but this can be mitigated by adding a lowpass filter. References BYU Dynamics and Control by John D. Hedengren Control Tutorials for Matlab & Simulink PID Control Design by A.B. Campo Wikipedia - PID Controller, Wikipedia - Integral Windup The Basics of Tuning PID Loops Tunable Parameters To achieve the desired behavior from the controller, we tune some of the parameters in software and tune other parameters as part of choosing or sizing elements of the system during the design process. Pure Tunables I call the parameters that we can choose and change \u201cfor free\u201d pure tunables, since tuning these values can be done as desired without extra engineering work. Target altitude Controller dead zone (allowable steady state error) Control loop cycle time (compute) Control loop cycle time (actuation PWM) Sensor measurement sample time Lowpass filter gain PID controller gains (which determine response time and percent overshoot) Initial ballast mass Initial lift gas mass Lift gas reserve fraction (fraction of total mass of lift gas allocated for altitude control) Arm / disarm criteria Calibrated Tunables Calibrated tunables are what I call parameters that affect the controller\u2019s behavior or system response but can\u2019t be dialed in on a whim. These are things that require extra engineering or design changes to tune. We choose ideal values for these parameters during the design process, and then we measure the true values when the system is built. Ballast mass flow rate Bleed mass flow rate Actuator and component dry mass Maximum control loop cycle time (compute) Maximum control loop cycle time (actuation PWM) Maximum sensor measurement sample time Maximum lift gas reserve fraction Avionics The altitude control flight software application ( Main Flight Computer Software Design ) issues commands to open the ballast or bleed valves over the CAN bus. When a bleed or ballast command is received by the altitude control interface board ( Altitude Control/Dynamics Sensor Card ) over CAN, it executes the corresponding subroutine to carry out the command. The software environment onboard the altitude control interface board ( Altitude Control/Dynamics Card Software Design ) includes drivers for the hardware interfaces, such as a PWM motor controller for the valve actuators. The altitude control interface board is also responsible for polling sensors and actuators for telemetry and pre-processing the raw signals (e.g. voltages from a pressure sensor) into the appropriate derived values (e.g. values in units of pressure) before sending them to the CAN bus for use by other flight software and downlink. Sensing Avionics Sensor Card GPS altitude Barometric altitude Ambient pressure Balloon Sensor Board Balloon valve position/state Balloon internal pressure Remaining lift gas Altitude Control/Dynamics Sensor Card Ballast valve position/state Remaining ballast sensor Actuation Raise altitude: Decrease total mass by releasing ballast. (See Ballast Hopper ) Lower altitude: Decrease buoyancy by venting lift gas. (See Balloon Plug ) System Design Parameters Requirements Requirement Description Target Allowable Bounds Settling time Time for controller to transition from stabilize to cruise mode. 20 minutes. 10 minutes - 1 hour Steady state error (dead zone) Magnitude of the difference between target altitude and actual altitude during cruise mode 150 m 0 m - 500 m Ballast mass budget Portion of total system mass budget allocated to ballast material 1 kg or 25% 1 kg - 2 kg Bleed mass budget Portion of total system lift gas allocated to altitude control. 0.5 kg or 30% No more than the mass of lift gas needed for positive lift with empty ballast Flight duration Impact on total flight time (launch to recovery) with altitude control enabled compared to an equivalent flight with altitude control disabled 7 hours No less than the System Elements Configuration Item Function Location Interfaces Altitude Control Application Executes control algorithm and issues commands to actuators. Main Flight Computer ) Main Flight Computer , Telemetry RX App , Command TX App Altitude Control/Dynamics Sensor Card Receives commands, drives bleed and ballast actuators, collects and preprocesses raw signals from sensors and reports telemetry to the CAN bus. Avionics Rack Avionics Rack , Backplane Interface Board , CAN bus TX/RX Ballast Valve Actuator Dispenses ballast mass from the ballast hopper. Ballast Hopper Ballast Hopper , Altitude Control/Dynamics Sensor Card Bleed Valve Actuator Vents lift gas from the balloon. Balloon Plug Balloon Plug , Balloon Board Barometer Measures ambient barometric pressure and is calibrated to provide approximate altitude based on standard altitudes of isobaric layers of the atmosphere. Avionics Sensor Card Avionics Sensor Card GPS receiver Measures GPS altitude. Avionics Sensor Card Avionics Sensor Card Risk Assessment Risk Impact Mitigation Controller bleeds too much gas and the remaining gas in the balloon cannot lift the payload, even with an empty ballast hopper. Severe. Flight terminated early. Calibrate the bleed valve mass flow rate perhaps in correlation to balloon internal pressure and/or time spent with the valve open. Software disarm based on estimated lift gas remaining. Altitude never converges to a stable altitude by the time actuation limits are reached. Minor. Flight duration mission objective is compromised, but no impact to other impacts of the flight. Tune the controller to minimize overshoot and oscillations, allowing for a longer response time. Bleed valve releases more gas than estimations or measurements report. Moderate. It's okay if more gas is released than expected unless the remaining gas in the system cannot lift the \"dry\" mass of the system. Add some margin to the lift gas reserve level so that the controller is disarmed due to low gas before reaching a dangerously low level. Make a direct measurement from inside the balloon that correlates to the amount of gas remaining, such as a calibrated temperature and pressure corresponding to the amount of gas remaining. Bleed valve gets stuck in the open position. Severe. Flight terminated early. Add a redundant/emergency valve close mechanism to the balloon plug. Build a cutdown threshold into the altitude controller so that if the controller is armed and altitude reaches the lower bound, the flight is terminated via cutdown. Bleed valve gets stuck in the closed position. Minor. Altitude control is critically disabled, but no impact to other impacts of the flight. Testing and pre-flight inspection. Ballast valve releases more ballast than estimations or measurements report. Moderate. It\u2019s okay if more ballast is released than expected unless the controller thinks there is more ballast to release but there is not. Add some margin to the ballast reserve level so that the controller disarms due to ballast before reaching a dangerously low level. Make a direct measurement from inside the ballast hopper correlated to the amount of ballast remaining, such as a calibrated mass flow rate corresponded to ballast remaining. Ballast valve gets stuck in the open position. Minor. Altitude control is critically disabled, but no impact to other impacts of the flight. Testing and pre-flight inspection. Ballast valve gets stuck in the closed position. Moderate. If ballast is stuck closed and the vehicle is descending, this would terminate the flight as the vehicle would not be able to recover positive lift. Redundant valve open mechanism or emergency (forcible) dumping of all ballast. Store additional dry mass to release as emergency ballast. Controller is armed too early. Moderate. Bleed and ballast reserves could be expended prior to reaching the target altitude or meeting the flight duration target. Place conservative delays and lockouts on the arming criteria. Altitude measurements are noisy or inaccurate. Moderate. Bleed and ballast reserves could be expended prior to reaching the target altitude or meeting the flight duration target. Use a low-pass filter on sensor readings, introduce a dead zone to the controller activation scheme, and fuse altitude readings from multiple sensors. Drastic transient changes to ascent rate and altitude due to localized atmospheric wind shear. Moderate. A localized area of the atmosphere could cause us to releast a lot of gas/ballast to compensate, then dump us back where we started, causing a lot of control mass to be wasted. Look at local GFS weather data on launch day. If there is significant vertical wind shear in the area, stand down on launch. For significant and sudden changes in ascent rate (or other measurement data like pressure, acceleration, etc), especially during cruise mode, temporarily disarm the altitude controller. Schedule Proof of Concept A PID controller of this nature has been demonstrated using MATLAB/Simulink integrated with an implementation of a 1D Simple Atmospheric Ascent Model . The model source code is available on GitHub along with a PDF version of the schematic .","title":"Altitude Control Logic"},{"location":"pdr_altitudecontrol/#altitude-control-logic","text":"Lead: Philip Linden Overview : The scope of this PDR covers the logic and operations of the altitude controller system on the HAB, including arm and disarm criteria, approach for calculating when to actuate controllers, and risk mitigation strategies. The design of actuation mechanisms and electronic components are discussed in Mechanical Systems and Flight Avionics Hardware , respectively. Objective : Actively control the weight and buoyancy of the HAB in order to maintain equilibrium at a prescribed altitude.","title":"Altitude Control Logic"},{"location":"pdr_altitudecontrol/#approach","text":"Normally the balloon is filled with lifting gas so that it rises with the payload until it reaches an altitude where the ambient temperature and pressure cause the balloon to expand beyond its limits and it bursts. Without active control, flight time can be increased by filling the balloon with just enough lift gas to be at equilibrium at the target altitude, but this is difficult for several reasons: The actual temperature and pressure at the target altitude are at best roughly approximated by models, even when accounting for the latest weather forecast. Temperature and pressure are not constant at the target altitude, so even if there was a perfectly measured amount of lift gas to be at equilibrium for a specific temperature and pressure band, it wouldn\u2019t follow a target altitude. Filling the balloon with less gas would mean it takes longer for the HAB to reach the target altitude. The HAB\u2019s altitude is a function of two opposing forces: the upward buoyancy force and the weight of the balloon-payload system. Critically, both are directly influenced by something we can control. Buoyancy is a function of the amount of lift gas in the balloon, and weight is a function of the mass of the payload. Thus we can design a closed-loop control algorithm to change the balance of these two forces by bleeding lift gas from the balloon or dropping ballast mass from the payload based on the measured altitude in order to converge to some target altitude. This addresses a number of issues encountered with passive flight: Dynamic feedback control allows the balloon to maintain equilibrium at a target altitude through changing temperatures and pressures. Open-loop control of lifting gas allows the balloon to be overfilled at launch, rising to the target altitude quickly and then bleeding gas from the balloon until equilibrium is achieved. In order for the controller to converge to a geometric altitude, it must use a non-atmospheric reference like GPS altitude. Barometric altimeters measure pressure, which is calibrated to isobaric layers of a standard reference atmosphere. Primary mode : GPS altitude hold. Secondary mode : Isobaric altitude hold.","title":"Approach"},{"location":"pdr_altitudecontrol/#concept-of-operations","text":"Wait for a controller enable to be sent. Disarm the controller when the avionics boot up. During pre-launch, operators enable the controller. Disarm the controller unless when all of the following conditions are met: A controller enable command has been received since the last boot or the last controller disable command. The control error has crossed zero at least once (i.e., the HAB\u2019s altitude has risen above the target altitude at least once). There is ballast mass remaining in the reservoir. Calibrate the mass flow rate at the ballast release valve prior to flight and keep a tally of remaining ballast mass. There is enough lifting gas in the balloon for the HAB to rise if the reservoir were empty. Use a pressure sensor in the balloon to compute the mass flow rate at the bleed valve from the gauge pressure and temperature of lifting gas inside the balloon and keep a tally of remaining lifting gas. Use a tuned PI control to drive a ballast release valve and a gas bleed valve. The controller is designed for disturbance rejection of a noisy altitude signal. In order to conserve control effort, we must tune the controller such that overshoot and oscillations are minimized. Response time and settling time should be tuned to be small compared to flight time, but can still be on the order of ~1 hour. Control loop PWM frequency is tuned to be much faster than the response time. GPS altitude hold (Stabilize): Enter stabilize control mode when the controller is armed and remain in this mode until ascent rate and/or altitude error are greater than the allowable bounds. Use GPS altitude to converge to a geometric altitude that may cross isobaric layer boundaries. This control mode uses more control mass than barometric altitude hold so it should not be used for extended periods of time. Use this control mode during the stabilize phase to quickly approach the target altitude. Barometric altitude hold (Cruise): Once the vehicle is near the target altitude and has reached a steady state, transition to cruise mode to maintain an altitude near the target for an extended period of time. Use barometric altitude to equalize to an isobaric layer of the atmosphere corresponding to a calibrated approximate altitude. This control mode uses less control mass because it is able to equalize the balloon pressure to ambient pressure and \u201cride\u201d isobaric layers of atmosphere. Hold an isobaric altitude during the cruise phase in order to conserve control mass. If the controller is still armed and the altitude error exceeds the allowable range, transition from cruise to stabilize and then repeat this algorithm until the controller is disarmed. When the controller is disarmed, dump all remaining ballast. Lock the ballast valve in the open position. Lock the bleed valve in the closed position.","title":"Concept of Operations"},{"location":"pdr_altitudecontrol/#pid-control","text":"In order to dynamically determine how much to bleed or ballast, we implement a PID controller to determine the percentage of time of each control cycle to keep the bleed or ballast valve open. This is also referred to as PWM control with a PID algorithm. The PID control algorithm works by modulating the inputs, u, to the Plant, which in our case means the bleed and ballast controls. The Plant is the physical response, so the balance of weight, buoyancy, and drag forces with the given mass properties and ambient conditions. (See 1D Atmospheric Flight Model ) The output of the Plant is the actual altitude, y . For a given set point altitude, r , the PID controller attempts to reduce the error, e=r-y , to zero. The PID controller consists of a set of gains applied to a proportional term, an integral term, and a derivative term that all operate on the error signal, e . These gains are tuned to get the desired response from the controller.","title":"PID Control"},{"location":"pdr_altitudecontrol/#rules-of-thumb","text":"Proportional gain : How aggressively signal approaches setpoint. Too much causes overshoot. No impact on steady-state error. Integral gain : How much error matters over time. Reduces oscillations and steady-state errors. Prone to windup, where accumulated errors over a long time cause lag in the controller after it reaches the desired point. Derivative gain : How much rate of change matters. Reduces overshoot. Prone to oscillations. Noisy signals make it go crazy, but this can be mitigated by adding a lowpass filter.","title":"Rules of thumb"},{"location":"pdr_altitudecontrol/#references","text":"BYU Dynamics and Control by John D. Hedengren Control Tutorials for Matlab & Simulink PID Control Design by A.B. Campo Wikipedia - PID Controller, Wikipedia - Integral Windup The Basics of Tuning PID Loops","title":"References"},{"location":"pdr_altitudecontrol/#tunable-parameters","text":"To achieve the desired behavior from the controller, we tune some of the parameters in software and tune other parameters as part of choosing or sizing elements of the system during the design process.","title":"Tunable Parameters"},{"location":"pdr_altitudecontrol/#pure-tunables","text":"I call the parameters that we can choose and change \u201cfor free\u201d pure tunables, since tuning these values can be done as desired without extra engineering work. Target altitude Controller dead zone (allowable steady state error) Control loop cycle time (compute) Control loop cycle time (actuation PWM) Sensor measurement sample time Lowpass filter gain PID controller gains (which determine response time and percent overshoot) Initial ballast mass Initial lift gas mass Lift gas reserve fraction (fraction of total mass of lift gas allocated for altitude control) Arm / disarm criteria","title":"Pure Tunables"},{"location":"pdr_altitudecontrol/#calibrated-tunables","text":"Calibrated tunables are what I call parameters that affect the controller\u2019s behavior or system response but can\u2019t be dialed in on a whim. These are things that require extra engineering or design changes to tune. We choose ideal values for these parameters during the design process, and then we measure the true values when the system is built. Ballast mass flow rate Bleed mass flow rate Actuator and component dry mass Maximum control loop cycle time (compute) Maximum control loop cycle time (actuation PWM) Maximum sensor measurement sample time Maximum lift gas reserve fraction","title":"Calibrated Tunables"},{"location":"pdr_altitudecontrol/#avionics","text":"The altitude control flight software application ( Main Flight Computer Software Design ) issues commands to open the ballast or bleed valves over the CAN bus. When a bleed or ballast command is received by the altitude control interface board ( Altitude Control/Dynamics Sensor Card ) over CAN, it executes the corresponding subroutine to carry out the command. The software environment onboard the altitude control interface board ( Altitude Control/Dynamics Card Software Design ) includes drivers for the hardware interfaces, such as a PWM motor controller for the valve actuators. The altitude control interface board is also responsible for polling sensors and actuators for telemetry and pre-processing the raw signals (e.g. voltages from a pressure sensor) into the appropriate derived values (e.g. values in units of pressure) before sending them to the CAN bus for use by other flight software and downlink.","title":"Avionics"},{"location":"pdr_altitudecontrol/#sensing","text":"Avionics Sensor Card GPS altitude Barometric altitude Ambient pressure Balloon Sensor Board Balloon valve position/state Balloon internal pressure Remaining lift gas Altitude Control/Dynamics Sensor Card Ballast valve position/state Remaining ballast sensor","title":"Sensing"},{"location":"pdr_altitudecontrol/#actuation","text":"Raise altitude: Decrease total mass by releasing ballast. (See Ballast Hopper ) Lower altitude: Decrease buoyancy by venting lift gas. (See Balloon Plug )","title":"Actuation"},{"location":"pdr_altitudecontrol/#system-design-parameters","text":"","title":"System Design Parameters"},{"location":"pdr_altitudecontrol/#requirements","text":"Requirement Description Target Allowable Bounds Settling time Time for controller to transition from stabilize to cruise mode. 20 minutes. 10 minutes - 1 hour Steady state error (dead zone) Magnitude of the difference between target altitude and actual altitude during cruise mode 150 m 0 m - 500 m Ballast mass budget Portion of total system mass budget allocated to ballast material 1 kg or 25% 1 kg - 2 kg Bleed mass budget Portion of total system lift gas allocated to altitude control. 0.5 kg or 30% No more than the mass of lift gas needed for positive lift with empty ballast Flight duration Impact on total flight time (launch to recovery) with altitude control enabled compared to an equivalent flight with altitude control disabled 7 hours No less than the","title":"Requirements"},{"location":"pdr_altitudecontrol/#system-elements","text":"Configuration Item Function Location Interfaces Altitude Control Application Executes control algorithm and issues commands to actuators. Main Flight Computer ) Main Flight Computer , Telemetry RX App , Command TX App Altitude Control/Dynamics Sensor Card Receives commands, drives bleed and ballast actuators, collects and preprocesses raw signals from sensors and reports telemetry to the CAN bus. Avionics Rack Avionics Rack , Backplane Interface Board , CAN bus TX/RX Ballast Valve Actuator Dispenses ballast mass from the ballast hopper. Ballast Hopper Ballast Hopper , Altitude Control/Dynamics Sensor Card Bleed Valve Actuator Vents lift gas from the balloon. Balloon Plug Balloon Plug , Balloon Board Barometer Measures ambient barometric pressure and is calibrated to provide approximate altitude based on standard altitudes of isobaric layers of the atmosphere. Avionics Sensor Card Avionics Sensor Card GPS receiver Measures GPS altitude. Avionics Sensor Card Avionics Sensor Card","title":"System Elements"},{"location":"pdr_altitudecontrol/#risk-assessment","text":"Risk Impact Mitigation Controller bleeds too much gas and the remaining gas in the balloon cannot lift the payload, even with an empty ballast hopper. Severe. Flight terminated early. Calibrate the bleed valve mass flow rate perhaps in correlation to balloon internal pressure and/or time spent with the valve open. Software disarm based on estimated lift gas remaining. Altitude never converges to a stable altitude by the time actuation limits are reached. Minor. Flight duration mission objective is compromised, but no impact to other impacts of the flight. Tune the controller to minimize overshoot and oscillations, allowing for a longer response time. Bleed valve releases more gas than estimations or measurements report. Moderate. It's okay if more gas is released than expected unless the remaining gas in the system cannot lift the \"dry\" mass of the system. Add some margin to the lift gas reserve level so that the controller is disarmed due to low gas before reaching a dangerously low level. Make a direct measurement from inside the balloon that correlates to the amount of gas remaining, such as a calibrated temperature and pressure corresponding to the amount of gas remaining. Bleed valve gets stuck in the open position. Severe. Flight terminated early. Add a redundant/emergency valve close mechanism to the balloon plug. Build a cutdown threshold into the altitude controller so that if the controller is armed and altitude reaches the lower bound, the flight is terminated via cutdown. Bleed valve gets stuck in the closed position. Minor. Altitude control is critically disabled, but no impact to other impacts of the flight. Testing and pre-flight inspection. Ballast valve releases more ballast than estimations or measurements report. Moderate. It\u2019s okay if more ballast is released than expected unless the controller thinks there is more ballast to release but there is not. Add some margin to the ballast reserve level so that the controller disarms due to ballast before reaching a dangerously low level. Make a direct measurement from inside the ballast hopper correlated to the amount of ballast remaining, such as a calibrated mass flow rate corresponded to ballast remaining. Ballast valve gets stuck in the open position. Minor. Altitude control is critically disabled, but no impact to other impacts of the flight. Testing and pre-flight inspection. Ballast valve gets stuck in the closed position. Moderate. If ballast is stuck closed and the vehicle is descending, this would terminate the flight as the vehicle would not be able to recover positive lift. Redundant valve open mechanism or emergency (forcible) dumping of all ballast. Store additional dry mass to release as emergency ballast. Controller is armed too early. Moderate. Bleed and ballast reserves could be expended prior to reaching the target altitude or meeting the flight duration target. Place conservative delays and lockouts on the arming criteria. Altitude measurements are noisy or inaccurate. Moderate. Bleed and ballast reserves could be expended prior to reaching the target altitude or meeting the flight duration target. Use a low-pass filter on sensor readings, introduce a dead zone to the controller activation scheme, and fuse altitude readings from multiple sensors. Drastic transient changes to ascent rate and altitude due to localized atmospheric wind shear. Moderate. A localized area of the atmosphere could cause us to releast a lot of gas/ballast to compensate, then dump us back where we started, causing a lot of control mass to be wasted. Look at local GFS weather data on launch day. If there is significant vertical wind shear in the area, stand down on launch. For significant and sudden changes in ascent rate (or other measurement data like pressure, acceleration, etc), especially during cruise mode, temporarily disarm the altitude controller.","title":"Risk Assessment"},{"location":"pdr_altitudecontrol/#schedule","text":"","title":"Schedule"},{"location":"pdr_altitudecontrol/#proof-of-concept","text":"A PID controller of this nature has been demonstrated using MATLAB/Simulink integrated with an implementation of a 1D Simple Atmospheric Ascent Model . The model source code is available on GitHub along with a PDF version of the schematic .","title":"Proof of Concept"},{"location":"pdr_avhw/","text":"Flight Hardware Lead: Matthew Glazer Design Path Forward Major Constraints Timeline Cost Card Specific Information Overview : The scope of this PDR covers all hardware design and development as it currently stands for the Nucleus HAB launch. Development approaches, timelines and overall board information are provided. The design of payload, actuation mechanisms and software design are discussed in Altitude Control Logic , Mechanical Systems and Flight Avionics Software , respectively. Overview : The Flight Hardware system for the nucleus mission provides all the power, computing and control elements required for mission success. There are seven primary PCBs and an assortment of secondary PCBs as part of this system. Design Path Forward Commonality The Main Flight Computer and Payload Cards are based on a template. The MFC Card template approach is more useful for future development of additional missions. However the Payload Card template is the base of all card development. The template will include connector interfaces, switching regulators, communication interfaces and finally the MCU. From here the cards can be tailored to the individual payload cards. The intent is to complete this template and then reuse to develop the individual cards, this will reduce development time and provide a basis for future missions. Card design Compartmentalization Continuing the idea of basing each card off a template, the designs are compartmentalized and common across all cards. The goal is for major subsections to be a \u201ccopy and paste\u201d approach, i.e. using the same components and schematic blocks wherever possible. Likely schematic blocks include: Microcontroller 3.3V/1.8V regulators Sensors (IMU etc) Ethernet/CAN Mechanical All Cards are designed to roughly the same dimensions, depending on card. Currently all cards are specified to the following dimensions of 100x100mm with a provision to increase to 105x200mm if additional space is needed. There will be three primary \u201cconfiguration options\u201d for board length, 100mm, 150mm and 200mm. Mounting points will be based off the three configuration options. All cards have M3 mounting holes 5mm x 5mm from the corner, except for the MFC\u2019s mounting holes by the backplane connector which are 5mm x 15mm from card edge. Need is unexpected, but any large components would likely be \u201cpotted\u201d for strength. Design Rules Electrical signals routed on all cards and boards fall into three categories: Differential Routing, GPIO and Power. Differential routing will follow Ethernet and CAN design requirements, i.e. 50 or 100 ohm differential pairs etc. These signals will be routed primarily on layer one of the PCB and grouped together away from all power and GPIO signals. A full ground plane will be routed underneath. On four layer boards, power will be routed on layer three, on two layer boards power will be routed on layer one. High current paths, such as on the backplane will be implemented through copper pours, while all other routing of power will be through a different trace width versus signals to differentiate trace types. GPIO will be routed on either layer one or four, depending on keepout zones for the ethernet and CAN routing. Less dependent on a ground layer underneath but all effort will be made to maintain the same style of trace coupling. Trace width\u2019s will be dictated by PCB manufacturer\u2019s guidelines. For initial development will likely use the MacroFab design rules guidelines and then tweak as necessary based on final selected vendor. Positioning is determined by mechanical design\u2019s CAD model as well as card spacing. Common Interfaces Backplane Interfaces between cards are implemented through Molex Milli-Grid connectors. Backplane mounted connectors are vertical receptacles while card mounted connectors are right angle shrouded connectors. Ground station interface is through a molex MicroFit power header and RJ45 connector. These then attach to a panel mount style interface on outside of HAB enclosure. Balloon board backplane interface runs through a paired JST connector. Cards External interfaces to the cards will be implemented through JST PH connectors of varying conductor counts. Specifically for the Power Supply Card, a Molex Microfit power header will be used for battery interface. GPS antenna will be an SMA connector interface. Manufacturing Board Stackups ENIG plating Blue soldermask White silkscreen 1oz copper (outer layers) 0.5oz copper (inner layers) 4 layer PCB Signal - Differential Pairs Ground Power Signal - GPIO/Ground 2 layer PCB Signal/Power Ground Card Specifics Backplane PCB design is primarily through hole with some surface mount capacitors. No issues expected with manufacturing. This is the simplest card of the whole stack. Assembly expected to be by hand, by Brickworks members. Starting point for stackup: 4 layer PCB Main Flight Computer If reasonably priced then impedance matching will be added to PCB ordering. 99% surface mount design, only connectors will be through hole. This card is the only card currently being considered for professional manufacturing. Starting point for stackup: 4 layer PCB Payload cards 99% surface mount design, only connectors will be through hole. No significant impedance match trace work expected, except potentially on the communications Card. Starting point for stackup: 2 layer PCB Battery Pack Pack will be 18650 cells, these are sourced from matt\u2019s personal stockpile, they are not new manufacture cells but no issues expected as they were salvaged out of a Model S. Pack Design 3.7V nominal; 3100mAh cells. Pack would be configured in a 4 series, 2 parallel (4S2P) design with the option of expanding the packs to larger quantities as mission configuration requires. Current mission design is a 14.8V nominal (12-16.8V range), 6200mAh pack. Expected temperatures at altitude will reduce total capacity to a currently unknown amount but a conservative approach is an expectation of 40% total capacity loss at max altitude. This can be accounted for using thermal insulation and potentially a small heater. Pack Assembly Battery pack will be tab welded together for electrical connections, cells well be hotglued together for initial mechanical stability with additional framing to be added as necessary. Testing All boards will be designed with large #'s of test points. This points will sit on all voltage rails and major signal paths (where possible). Will allow for testing of most signalling/power, especially useful when testing subsystems such as CAN and Ethernet. Before power-up, a full continuity test will be performed, checking for opens and shorts where needed/unwanted on all signals and power lines. Bring-up plan will be power supplies first, testing successful operation and confirming efficiency. Full board assembly will progress after that. Power supplies will be tested for basic output levels, output ripple, load testing and overall efficiency. Thermal analysis All boards will have a power analysis completed to provide input to a thermal simulation. Power dissipation can be calculated across the board with reasonable accuracy combined with known thermal impedance numbers based on vendor information. Using this information we can get an estimate of how the boards will fare temperature wise through the flight. Thermal numbers will be calculated based off a vacuum enviornment as that is \"simpler\" to generate information for. We do hit near vacuum level enviornments during flight and as such if the calculations/simulations show reasonable operation then this will act as a worst case that shows it will work in other enviornments. Major Constraints Board outline constraints subject to change per CAD model. Backplane Pinout needs to be determined and set in stone as soon as physically possible. Main Flight Computer Card Heavy focus on proper trace routing for processor and Ethernet/CAN/USB. Processor SoM is a BGA package with wide pin pitch, care needs to be taken during design and manufacturing. Will likely require special constraints for PCB manufacturing. Power Supply Card This card is heavily driven by software, basic functionality requires a software package and cannot run in an \u201canalog\u201d sense. Primarily the battery management system. The switching regulator system will function normally without software function. Avionics Sensor Card GPS system is currently TBD COTS APRS interface is currently TBD Recovery assist still needs concept determined to create design. Communications Card Implementation of this will rely heavily on Dan\u2019s amplifier designs and overall implementation, however major portions have already been decided such as the SDR so work can begin. Block diagram and basic interaction outside of SDR TBD. Timeline MFC Card Development 3 weeks to complete schematic 3 weeks to complete PCB 3 weeks for manufacturing Payload Card development 2 weeks to complete template schematic 1 week to complete customized payload card schematic 3 weeks to complete PCB 3 weeks for manufacturing Development plan I believe this is literally waterfall design. There will be some jumping around between cards as plans are finalized however see below for the approximate development path. The goal will be to simultaneously work on two project points at one point to near completion ( i.e. enough to put down to pick up the next two points. Currently the Backplane schematic is \u201ccomplete\u201d and work has started on the Backplane PCB and MFC Card schematic. PCB assembly will potentially occur during this development process based on how the card design finalizes and the needs of the software development side of things. However assembly and test of PCBAs is not included in this development schedule. Current expectation is that boards will be ordered and assembled after CDR. Cost: Backplane - $150 ea Main Flight Computer Card - $300 ea Avionics Sensor Card - $200 ea Altitude Control/Dynamics Sensor Card - $200 ea Communications Card - $300 ea Power Supply Card - $200 ea Balloon Board - $150 ea Total: $1500 per set Please note, this is a very rough estimate. The goal is to drive costs lower while maintaining high levels of features (I promise I'm not on the marketing team) Card Specific Information Backplane Theory of Operation This board acts as an interconnect between all payload cards and provides routing for all power and data connections. There is one dedicated card slot for the Main Flight Computer, Communications card and one for the Power Supply Card. In addition there are four payload card slots for various cards. Currently for Nucleus there is an Avionics Sensor Card, Altitude Control/Dynamics Sensor Card for payload cards Backplane Concepting - Ethernet Sheet Electrical Interface Connectors There is one 40 pin Molex MilliGrid vertical receptacle, one 34 pin Molex MilliGrid vertical receptacle and six 28 pin Molex MilliGrid vertical receptacles providing the interfaces between the various avionics cards. There is also a Molex Microfit header and RJ45 connector for ground station interface and a 10 pin JST header for connection to the balloon board. Main Flight Computer Interface Power/GPIO Interface Molex Part #: 0791077016 Ethernet Interface Molex Part #: 0791077019 Payload Card Slot 1 through 4 Molex Part #: 0791077013 Communications Card Molex Part #: 0791077013 Power Supply Card Molex Part #: 0791077013 CI\u2019s: Main Flight Computer Interface Payload Card Interfaces Communications Card Interface Power Supply Card Interface Interfaces: Backplane - Ethernet Backplane - CAN Backplane - USB Backplane - Power Main Flight Computer Card Theory of Operation The Main Flight Computer Card is the brain of the avionics stack. This card handles all primary functions and receives data from all other cards in the stack. Main Processor An Octavo OSD3358 SoM is the processor on this card. It is a single core application processor that can run linux, providing many options for the software team to develop flight programs. It also contains 512MB of RAM and 4GB of eMMC NAND flash for storage. There are no major external components required to complete the processor design beyond the SOM. The SOM also contains 3.3V and 1.8V regulators on board, simplifying the required external hardware, the SOM accepts 5V input. The SOM interfaces with the Ethernet and CAN drivers through dedicated ports on the processor. Ethernet Interface This card contains an Ethernet switch providing access to all payload cards except the power card and balloon board. The switch also interfaces back to the main processor providing the interconnect between all cards. Secondary Storage This Card will contain an SD card interface for expanded secondary data storage. Electrical Interface Major components Processor - OSD3358 SoM CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage 5V Power Rail Octavo OSD3358 SD Card Temperature Sensor Ethernet Switch Connectors There is one 34 pin and one 40 pin Molex MilliGrid Shrouded Right angle Connectors providing all interfaces to and from the Flight computer to the Backplane and other payload cards. Power/GPIO Connector Molex Part #: 0878333420 Reference view for pinout of connector is from FRONT of card. Ethernet Connector Molex Part #: 0878334020 Reference view for pinout of connector is from FRONT of card. CI\u2019s: Processor SoM Ethernet Switch Interfaces: Backplane - Ethernet Backplane - CAN Backplane - Power Power Supply Card Theory of Operation This card acts as the main power supply for the avionics stack. It has a battery input for a 18650 lithium ion battery pack as well as power rail outputs to the rest of the stack. It is capable of monitoring, controlling and charging the battery as well as supplying that power to its internal systems a Power On Reset The card is capable of sending a POR (Power On Reset) digital logic command to all cards in the avionics based off a digital logic command from the Main Flight Computer or from the ground station. A Watchdog timer will operate on the MFC and toggle a dedicated logic pin that runs to only the power supply card. The Power supply card will receive this and then toggle the GPIO - Common pin to trigger a reset on all cards in the avionics stack. Battery Management The Card will be able to manage, protect and charge the battery pack on board. Features available will include cell level voltage monitoring and balancing. Over/under-voltage cutoffs and over-current protection. Charging with programmable cutoffs as well as powerpath between charging and load and power monitoring in the form of a coloumb counter. Finally, temperature monitoring is part of both parts of the subsystem and all of the subsystem is digitally monitored by the Power Supply Card MCU. Cell monitoring/balancing and protection is provided by: BQ76920 Charging, Powerpath and power monitoring is provided by: LTC4015 Power Regulation The primary purpose of this card is to supply power to the rest of the avionics stack, this is accomplished through two switching regulators. A +5V and +12V rail is generated from the battery supply, both rails are generated from buck converter regulator designs. The 5V rail is designed to supply 4A max load while the 12V rail is designed for a max of 2A max load. Power Monitoring All voltage rails on the card are monitored for both voltage and current output. The output of these sensors will be fed to the MCU on the power card for both logging and fault detection. Over/under-voltage as well as over-current will be detectable and trigger a system reset. Each sensor will log both voltage and current at a rate of 25hz and create a rolling average at a rate of 5hz for datalogging. Remove before flight A remove before flight pin will directly control the battery pack, by isolating the pack while the remove before flight pin is inserted. This pin will be removed the day of launch operations (or during testing) to enable the battery pack and power up the Power Supply Card itself or the entire avionics stack. Remove before flight pins -POR command before startup? Electrical Interface Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Battery Charger - LTC4015 Battery Management - BQ76920 Battery Pack 4S2P 18650 Lithium Ion battery Power Supplies Output 12V Power Rail Balloon Board Altitude Control/Dynamics Sensor Card Output 5V Power Rail Main Flight Computer Card Avionics Sensor Card Communications Card Altitude Control/Dynamics Sensor Card 3.3V Power Rail Microcontroller Card logic Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Power Supply Card to the Backplane and the rest of the avionics stack. Backplane Connector Molex Part #: 0878332820 Reference view for pinout of connector is from FRONT of card. CI\u2019s: Microcontroller Switching Regulators Battery Pack Charger Battery Pack Monitor Remove Before Flight Circuit Interfaces: Backplane - CAN Backplane - Power Battery Pack Avionics Sensor Card Theory of Operation This card is the \u201ceyes and ears\u201d of the Main Flight Computer Card and contains all interfaces that are beyond the main processing and network management of the MFC. All sensors, interfaces and control systems used by the MFC directly and not in coordination with a payload mission live on this card. Sensor Systems This card will contain a set of sensors (IMU, pressure, temperature) that supplies the Main Flight Computer with telemetry seperate of any payload card. This provides redundancy in telemetry as well as allowing the MFC to fly with only the Avionics Sensor Card if needed. These sensors are common with similar sensors on the payload cards and include the following part numbers: ICM-20948 BMP388 TEMP SENSOR TBD External Interfaces This card provides two distinct external interfaces, one for GPS and one for Recovery Assistance GPS Provides an SMA header for the antenna connected to the GPS antenna. This GPS unit provides the HAB with its own GPS tracking and will eventually become the primary input for GPS. Currently this subsystem will act as the secondary, backup to the APRS tracking provides by a COTS board. Recovery Assistance This interface will connect out to buzzers and LEDs to assist in the recovery of the payload after landing. Activated only during the end of the flight. Electrical Interface Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail 3.3V Switching Regulator CAN Transceiver GPS 1.8V Switching Regulator Sensors Recovery Functions Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Avionics Sensor Card to the Backplane and Main Flight Computer. CI\u2019s: Microcontroller Sensor Network GPS system Recovery Assist Switching Regulators Interfaces: Backplane - Ethernet Backplane - CAN Backplane - Power GPS Radio antenna Recovery LEDs/Buzzer Altitude Control/Dynamics Sensor Card Theory of Operation Altitude Control System This subsystem contains the systems required to control the ballast portion of altitude control. Primarily servo drivers and additional monitoring to confirm proper operation of release system. Dynamics Sensors This subsystem is primarily a set of interfaces off the card to sensor nodes located throughout the HAB. The goal is to collect data from multiple points to create a model of the vehicle during flight. This will assist in validating movement/motion models and inform decisions for future attitude control systems. Electrical Interface Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail 3.3V Switching Regulator 1.8V Switching Regulator Servos 3.3V Switching Regulator Sensors 1.8V Switching Regulator Sensors Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Avionics Sensor Card to the Backplane and Main Flight Computer. Backplane Connector Molex Part #: 0878332820 Reference view for pinout of connector is from FRONT of card. CI\u2019s: Microcontroller Sensor Network - Altitude Control Sensor Network - Dynamics Ballast Controller Switching Regulators Interfaces: Backplane - Ethernet Backplane - CAN Backplane - Power Dynamics Sensor Nodes Communications Card Theory of Operation SDR An off the shelf SDR will be mounted to the communications card, it will communicate with the MFC through a USB 2.0 link. Electrical Interface Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail SDR 3.3V Switching Regulator RF Front end 3.3V Switching Regulator RF Front end Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Avionics Sensor Card to the Backplane and Main Flight Computer. Backplane Connector Molex Part #: 0878332820 Reference view for pinout of connector is from FRONT of card. CI\u2019s: Microcontroller Radio Backend Radio Front End Switching Regulators Interfaces: Backplane - Ethernet Backplane - CAN Backplane - USB Backplane - Power Radio antennas Balloon Board Theory of Operation Altitude Control The Balloon Board will control the gas regulation portion of the altitude control system. Board will supply the required interfaces and systems to operate a valve used to release helium from the balloon. The valve will be controlled by a servo motor. Balloon Monitoring The Balloon Board will be capable of monitoring internal conditions of the balloon through the use of pressure and temperature sensors. Pressure sensor will be board mounted and have a tap off the balloon plug to allow for local monitoring of the gas pressure, operating under the assumption that pressure is uniform within the balloon. A INSERT TYPE HERE temperature sense will be mounted inside the balloon plug and will have a wiring harness run back to the balloon board where any required filtering/amplification will be performed. Flight Control In the event of an issue requiring flight termination the Balloon Board also includes functionality to operate a nichrome based balloon cutoff. Additionally the valve can be commanded to open up and release all pressure. Electrical Interface Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail 1.8V Switching Regulator Sensors CAN Transceiver 1.8V Switching Regulator Sensors Servo Control Connectors There is one 10 pin JST PH shrouded right angle connector providing all interfaces to and from the Balloon Board to the Backplane and Main Flight Computer. Backplane Connector JST Part #: S10B-PH-K-S(LF)(SN) Reference view for pinout of connector is from FRONT of card. CI\u2019s: Microcontroller Balloon Monitoring Gas Relief System Switching Regulators Interfaces: Backplane - CAN Backplane - Power Gas Relief System","title":"Flight Avionics Hardware"},{"location":"pdr_avhw/#flight-hardware","text":"Lead: Matthew Glazer Design Path Forward Major Constraints Timeline Cost Card Specific Information Overview : The scope of this PDR covers all hardware design and development as it currently stands for the Nucleus HAB launch. Development approaches, timelines and overall board information are provided. The design of payload, actuation mechanisms and software design are discussed in Altitude Control Logic , Mechanical Systems and Flight Avionics Software , respectively. Overview : The Flight Hardware system for the nucleus mission provides all the power, computing and control elements required for mission success. There are seven primary PCBs and an assortment of secondary PCBs as part of this system.","title":"Flight Hardware"},{"location":"pdr_avhw/#design-path-forward","text":"","title":"Design Path Forward"},{"location":"pdr_avhw/#commonality","text":"The Main Flight Computer and Payload Cards are based on a template. The MFC Card template approach is more useful for future development of additional missions. However the Payload Card template is the base of all card development. The template will include connector interfaces, switching regulators, communication interfaces and finally the MCU. From here the cards can be tailored to the individual payload cards. The intent is to complete this template and then reuse to develop the individual cards, this will reduce development time and provide a basis for future missions.","title":"Commonality"},{"location":"pdr_avhw/#card-design","text":"","title":"Card design"},{"location":"pdr_avhw/#compartmentalization","text":"Continuing the idea of basing each card off a template, the designs are compartmentalized and common across all cards. The goal is for major subsections to be a \u201ccopy and paste\u201d approach, i.e. using the same components and schematic blocks wherever possible. Likely schematic blocks include: Microcontroller 3.3V/1.8V regulators Sensors (IMU etc) Ethernet/CAN","title":"Compartmentalization"},{"location":"pdr_avhw/#mechanical","text":"All Cards are designed to roughly the same dimensions, depending on card. Currently all cards are specified to the following dimensions of 100x100mm with a provision to increase to 105x200mm if additional space is needed. There will be three primary \u201cconfiguration options\u201d for board length, 100mm, 150mm and 200mm. Mounting points will be based off the three configuration options. All cards have M3 mounting holes 5mm x 5mm from the corner, except for the MFC\u2019s mounting holes by the backplane connector which are 5mm x 15mm from card edge. Need is unexpected, but any large components would likely be \u201cpotted\u201d for strength.","title":"Mechanical"},{"location":"pdr_avhw/#design-rules","text":"Electrical signals routed on all cards and boards fall into three categories: Differential Routing, GPIO and Power. Differential routing will follow Ethernet and CAN design requirements, i.e. 50 or 100 ohm differential pairs etc. These signals will be routed primarily on layer one of the PCB and grouped together away from all power and GPIO signals. A full ground plane will be routed underneath. On four layer boards, power will be routed on layer three, on two layer boards power will be routed on layer one. High current paths, such as on the backplane will be implemented through copper pours, while all other routing of power will be through a different trace width versus signals to differentiate trace types. GPIO will be routed on either layer one or four, depending on keepout zones for the ethernet and CAN routing. Less dependent on a ground layer underneath but all effort will be made to maintain the same style of trace coupling. Trace width\u2019s will be dictated by PCB manufacturer\u2019s guidelines. For initial development will likely use the MacroFab design rules guidelines and then tweak as necessary based on final selected vendor. Positioning is determined by mechanical design\u2019s CAD model as well as card spacing.","title":"Design Rules"},{"location":"pdr_avhw/#common-interfaces","text":"","title":"Common Interfaces"},{"location":"pdr_avhw/#backplane","text":"Interfaces between cards are implemented through Molex Milli-Grid connectors. Backplane mounted connectors are vertical receptacles while card mounted connectors are right angle shrouded connectors. Ground station interface is through a molex MicroFit power header and RJ45 connector. These then attach to a panel mount style interface on outside of HAB enclosure. Balloon board backplane interface runs through a paired JST connector.","title":"Backplane"},{"location":"pdr_avhw/#cards","text":"External interfaces to the cards will be implemented through JST PH connectors of varying conductor counts. Specifically for the Power Supply Card, a Molex Microfit power header will be used for battery interface. GPS antenna will be an SMA connector interface.","title":"Cards"},{"location":"pdr_avhw/#manufacturing","text":"","title":"Manufacturing"},{"location":"pdr_avhw/#board-stackups","text":"ENIG plating Blue soldermask White silkscreen 1oz copper (outer layers) 0.5oz copper (inner layers) 4 layer PCB Signal - Differential Pairs Ground Power Signal - GPIO/Ground 2 layer PCB Signal/Power Ground","title":"Board Stackups"},{"location":"pdr_avhw/#card-specifics","text":"Backplane PCB design is primarily through hole with some surface mount capacitors. No issues expected with manufacturing. This is the simplest card of the whole stack. Assembly expected to be by hand, by Brickworks members. Starting point for stackup: 4 layer PCB Main Flight Computer If reasonably priced then impedance matching will be added to PCB ordering. 99% surface mount design, only connectors will be through hole. This card is the only card currently being considered for professional manufacturing. Starting point for stackup: 4 layer PCB Payload cards 99% surface mount design, only connectors will be through hole. No significant impedance match trace work expected, except potentially on the communications Card. Starting point for stackup: 2 layer PCB","title":"Card Specifics"},{"location":"pdr_avhw/#battery-pack","text":"Pack will be 18650 cells, these are sourced from matt\u2019s personal stockpile, they are not new manufacture cells but no issues expected as they were salvaged out of a Model S.","title":"Battery Pack"},{"location":"pdr_avhw/#pack-design","text":"3.7V nominal; 3100mAh cells. Pack would be configured in a 4 series, 2 parallel (4S2P) design with the option of expanding the packs to larger quantities as mission configuration requires. Current mission design is a 14.8V nominal (12-16.8V range), 6200mAh pack. Expected temperatures at altitude will reduce total capacity to a currently unknown amount but a conservative approach is an expectation of 40% total capacity loss at max altitude. This can be accounted for using thermal insulation and potentially a small heater.","title":"Pack Design"},{"location":"pdr_avhw/#pack-assembly","text":"Battery pack will be tab welded together for electrical connections, cells well be hotglued together for initial mechanical stability with additional framing to be added as necessary.","title":"Pack Assembly"},{"location":"pdr_avhw/#testing","text":"All boards will be designed with large #'s of test points. This points will sit on all voltage rails and major signal paths (where possible). Will allow for testing of most signalling/power, especially useful when testing subsystems such as CAN and Ethernet. Before power-up, a full continuity test will be performed, checking for opens and shorts where needed/unwanted on all signals and power lines. Bring-up plan will be power supplies first, testing successful operation and confirming efficiency. Full board assembly will progress after that. Power supplies will be tested for basic output levels, output ripple, load testing and overall efficiency.","title":"Testing"},{"location":"pdr_avhw/#thermal-analysis","text":"All boards will have a power analysis completed to provide input to a thermal simulation. Power dissipation can be calculated across the board with reasonable accuracy combined with known thermal impedance numbers based on vendor information. Using this information we can get an estimate of how the boards will fare temperature wise through the flight. Thermal numbers will be calculated based off a vacuum enviornment as that is \"simpler\" to generate information for. We do hit near vacuum level enviornments during flight and as such if the calculations/simulations show reasonable operation then this will act as a worst case that shows it will work in other enviornments.","title":"Thermal analysis"},{"location":"pdr_avhw/#major-constraints","text":"Board outline constraints subject to change per CAD model.","title":"Major Constraints"},{"location":"pdr_avhw/#backplane_1","text":"Pinout needs to be determined and set in stone as soon as physically possible.","title":"Backplane"},{"location":"pdr_avhw/#main-flight-computer-card","text":"Heavy focus on proper trace routing for processor and Ethernet/CAN/USB. Processor SoM is a BGA package with wide pin pitch, care needs to be taken during design and manufacturing. Will likely require special constraints for PCB manufacturing.","title":"Main Flight Computer Card"},{"location":"pdr_avhw/#power-supply-card","text":"This card is heavily driven by software, basic functionality requires a software package and cannot run in an \u201canalog\u201d sense. Primarily the battery management system. The switching regulator system will function normally without software function.","title":"Power Supply Card"},{"location":"pdr_avhw/#avionics-sensor-card","text":"GPS system is currently TBD COTS APRS interface is currently TBD Recovery assist still needs concept determined to create design.","title":"Avionics Sensor Card"},{"location":"pdr_avhw/#communications-card","text":"Implementation of this will rely heavily on Dan\u2019s amplifier designs and overall implementation, however major portions have already been decided such as the SDR so work can begin. Block diagram and basic interaction outside of SDR TBD.","title":"Communications Card"},{"location":"pdr_avhw/#timeline","text":"","title":"Timeline"},{"location":"pdr_avhw/#mfc-card-development","text":"3 weeks to complete schematic 3 weeks to complete PCB 3 weeks for manufacturing","title":"MFC Card Development"},{"location":"pdr_avhw/#payload-card-development","text":"2 weeks to complete template schematic 1 week to complete customized payload card schematic 3 weeks to complete PCB 3 weeks for manufacturing","title":"Payload Card development"},{"location":"pdr_avhw/#development-plan","text":"I believe this is literally waterfall design. There will be some jumping around between cards as plans are finalized however see below for the approximate development path. The goal will be to simultaneously work on two project points at one point to near completion ( i.e. enough to put down to pick up the next two points. Currently the Backplane schematic is \u201ccomplete\u201d and work has started on the Backplane PCB and MFC Card schematic. PCB assembly will potentially occur during this development process based on how the card design finalizes and the needs of the software development side of things. However assembly and test of PCBAs is not included in this development schedule. Current expectation is that boards will be ordered and assembled after CDR.","title":"Development plan"},{"location":"pdr_avhw/#cost","text":"Backplane - $150 ea Main Flight Computer Card - $300 ea Avionics Sensor Card - $200 ea Altitude Control/Dynamics Sensor Card - $200 ea Communications Card - $300 ea Power Supply Card - $200 ea Balloon Board - $150 ea Total: $1500 per set Please note, this is a very rough estimate. The goal is to drive costs lower while maintaining high levels of features (I promise I'm not on the marketing team)","title":"Cost:"},{"location":"pdr_avhw/#card-specific-information","text":"","title":"Card Specific Information"},{"location":"pdr_avhw/#backplane_2","text":"","title":"Backplane"},{"location":"pdr_avhw/#theory-of-operation","text":"This board acts as an interconnect between all payload cards and provides routing for all power and data connections. There is one dedicated card slot for the Main Flight Computer, Communications card and one for the Power Supply Card. In addition there are four payload card slots for various cards. Currently for Nucleus there is an Avionics Sensor Card, Altitude Control/Dynamics Sensor Card for payload cards Backplane Concepting - Ethernet Sheet","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface","text":"Connectors There is one 40 pin Molex MilliGrid vertical receptacle, one 34 pin Molex MilliGrid vertical receptacle and six 28 pin Molex MilliGrid vertical receptacles providing the interfaces between the various avionics cards. There is also a Molex Microfit header and RJ45 connector for ground station interface and a 10 pin JST header for connection to the balloon board. Main Flight Computer Interface Power/GPIO Interface Molex Part #: 0791077016 Ethernet Interface Molex Part #: 0791077019 Payload Card Slot 1 through 4 Molex Part #: 0791077013 Communications Card Molex Part #: 0791077013 Power Supply Card Molex Part #: 0791077013","title":"Electrical Interface"},{"location":"pdr_avhw/#cis","text":"Main Flight Computer Interface Payload Card Interfaces Communications Card Interface Power Supply Card Interface","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces","text":"Backplane - Ethernet Backplane - CAN Backplane - USB Backplane - Power","title":"Interfaces:"},{"location":"pdr_avhw/#main-flight-computer-card_1","text":"","title":"Main Flight Computer Card"},{"location":"pdr_avhw/#theory-of-operation_1","text":"The Main Flight Computer Card is the brain of the avionics stack. This card handles all primary functions and receives data from all other cards in the stack. Main Processor An Octavo OSD3358 SoM is the processor on this card. It is a single core application processor that can run linux, providing many options for the software team to develop flight programs. It also contains 512MB of RAM and 4GB of eMMC NAND flash for storage. There are no major external components required to complete the processor design beyond the SOM. The SOM also contains 3.3V and 1.8V regulators on board, simplifying the required external hardware, the SOM accepts 5V input. The SOM interfaces with the Ethernet and CAN drivers through dedicated ports on the processor. Ethernet Interface This card contains an Ethernet switch providing access to all payload cards except the power card and balloon board. The switch also interfaces back to the main processor providing the interconnect between all cards. Secondary Storage This Card will contain an SD card interface for expanded secondary data storage.","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface_1","text":"Major components Processor - OSD3358 SoM CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage 5V Power Rail Octavo OSD3358 SD Card Temperature Sensor Ethernet Switch Connectors There is one 34 pin and one 40 pin Molex MilliGrid Shrouded Right angle Connectors providing all interfaces to and from the Flight computer to the Backplane and other payload cards. Power/GPIO Connector Molex Part #: 0878333420 Reference view for pinout of connector is from FRONT of card. Ethernet Connector Molex Part #: 0878334020 Reference view for pinout of connector is from FRONT of card.","title":"Electrical Interface"},{"location":"pdr_avhw/#cis_1","text":"Processor SoM Ethernet Switch","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces_1","text":"Backplane - Ethernet Backplane - CAN Backplane - Power","title":"Interfaces:"},{"location":"pdr_avhw/#power-supply-card_1","text":"","title":"Power Supply Card"},{"location":"pdr_avhw/#theory-of-operation_2","text":"This card acts as the main power supply for the avionics stack. It has a battery input for a 18650 lithium ion battery pack as well as power rail outputs to the rest of the stack. It is capable of monitoring, controlling and charging the battery as well as supplying that power to its internal systems a Power On Reset The card is capable of sending a POR (Power On Reset) digital logic command to all cards in the avionics based off a digital logic command from the Main Flight Computer or from the ground station. A Watchdog timer will operate on the MFC and toggle a dedicated logic pin that runs to only the power supply card. The Power supply card will receive this and then toggle the GPIO - Common pin to trigger a reset on all cards in the avionics stack. Battery Management The Card will be able to manage, protect and charge the battery pack on board. Features available will include cell level voltage monitoring and balancing. Over/under-voltage cutoffs and over-current protection. Charging with programmable cutoffs as well as powerpath between charging and load and power monitoring in the form of a coloumb counter. Finally, temperature monitoring is part of both parts of the subsystem and all of the subsystem is digitally monitored by the Power Supply Card MCU. Cell monitoring/balancing and protection is provided by: BQ76920 Charging, Powerpath and power monitoring is provided by: LTC4015 Power Regulation The primary purpose of this card is to supply power to the rest of the avionics stack, this is accomplished through two switching regulators. A +5V and +12V rail is generated from the battery supply, both rails are generated from buck converter regulator designs. The 5V rail is designed to supply 4A max load while the 12V rail is designed for a max of 2A max load. Power Monitoring All voltage rails on the card are monitored for both voltage and current output. The output of these sensors will be fed to the MCU on the power card for both logging and fault detection. Over/under-voltage as well as over-current will be detectable and trigger a system reset. Each sensor will log both voltage and current at a rate of 25hz and create a rolling average at a rate of 5hz for datalogging. Remove before flight A remove before flight pin will directly control the battery pack, by isolating the pack while the remove before flight pin is inserted. This pin will be removed the day of launch operations (or during testing) to enable the battery pack and power up the Power Supply Card itself or the entire avionics stack. Remove before flight pins -POR command before startup?","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface_2","text":"Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Battery Charger - LTC4015 Battery Management - BQ76920 Battery Pack 4S2P 18650 Lithium Ion battery Power Supplies Output 12V Power Rail Balloon Board Altitude Control/Dynamics Sensor Card Output 5V Power Rail Main Flight Computer Card Avionics Sensor Card Communications Card Altitude Control/Dynamics Sensor Card 3.3V Power Rail Microcontroller Card logic Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Power Supply Card to the Backplane and the rest of the avionics stack. Backplane Connector Molex Part #: 0878332820 Reference view for pinout of connector is from FRONT of card.","title":"Electrical Interface"},{"location":"pdr_avhw/#cis_2","text":"Microcontroller Switching Regulators Battery Pack Charger Battery Pack Monitor Remove Before Flight Circuit","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces_2","text":"Backplane - CAN Backplane - Power Battery Pack","title":"Interfaces:"},{"location":"pdr_avhw/#avionics-sensor-card_1","text":"","title":"Avionics Sensor Card"},{"location":"pdr_avhw/#theory-of-operation_3","text":"This card is the \u201ceyes and ears\u201d of the Main Flight Computer Card and contains all interfaces that are beyond the main processing and network management of the MFC. All sensors, interfaces and control systems used by the MFC directly and not in coordination with a payload mission live on this card. Sensor Systems This card will contain a set of sensors (IMU, pressure, temperature) that supplies the Main Flight Computer with telemetry seperate of any payload card. This provides redundancy in telemetry as well as allowing the MFC to fly with only the Avionics Sensor Card if needed. These sensors are common with similar sensors on the payload cards and include the following part numbers: ICM-20948 BMP388 TEMP SENSOR TBD External Interfaces This card provides two distinct external interfaces, one for GPS and one for Recovery Assistance GPS Provides an SMA header for the antenna connected to the GPS antenna. This GPS unit provides the HAB with its own GPS tracking and will eventually become the primary input for GPS. Currently this subsystem will act as the secondary, backup to the APRS tracking provides by a COTS board. Recovery Assistance This interface will connect out to buzzers and LEDs to assist in the recovery of the payload after landing. Activated only during the end of the flight.","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface_3","text":"Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail 3.3V Switching Regulator CAN Transceiver GPS 1.8V Switching Regulator Sensors Recovery Functions","title":"Electrical Interface"},{"location":"pdr_avhw/#connectors","text":"There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Avionics Sensor Card to the Backplane and Main Flight Computer.","title":"Connectors"},{"location":"pdr_avhw/#cis_3","text":"Microcontroller Sensor Network GPS system Recovery Assist Switching Regulators","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces_3","text":"Backplane - Ethernet Backplane - CAN Backplane - Power GPS Radio antenna Recovery LEDs/Buzzer","title":"Interfaces:"},{"location":"pdr_avhw/#altitude-controldynamics-sensor-card","text":"","title":"Altitude Control/Dynamics Sensor Card"},{"location":"pdr_avhw/#theory-of-operation_4","text":"Altitude Control System This subsystem contains the systems required to control the ballast portion of altitude control. Primarily servo drivers and additional monitoring to confirm proper operation of release system. Dynamics Sensors This subsystem is primarily a set of interfaces off the card to sensor nodes located throughout the HAB. The goal is to collect data from multiple points to create a model of the vehicle during flight. This will assist in validating movement/motion models and inform decisions for future attitude control systems.","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface_4","text":"Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail 3.3V Switching Regulator 1.8V Switching Regulator Servos 3.3V Switching Regulator Sensors 1.8V Switching Regulator Sensors Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Avionics Sensor Card to the Backplane and Main Flight Computer. Backplane Connector Molex Part #: 0878332820 Reference view for pinout of connector is from FRONT of card.","title":"Electrical Interface"},{"location":"pdr_avhw/#cis_4","text":"Microcontroller Sensor Network - Altitude Control Sensor Network - Dynamics Ballast Controller Switching Regulators","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces_4","text":"Backplane - Ethernet Backplane - CAN Backplane - Power Dynamics Sensor Nodes","title":"Interfaces:"},{"location":"pdr_avhw/#communications-card_1","text":"","title":"Communications Card"},{"location":"pdr_avhw/#theory-of-operation_5","text":"SDR An off the shelf SDR will be mounted to the communications card, it will communicate with the MFC through a USB 2.0 link.","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface_5","text":"Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail SDR 3.3V Switching Regulator RF Front end 3.3V Switching Regulator RF Front end Connectors There is one 28 pin Molex MilliGrid shrouded right angle connector providing all interfaces to and from the Avionics Sensor Card to the Backplane and Main Flight Computer. Backplane Connector Molex Part #: 0878332820 Reference view for pinout of connector is from FRONT of card.","title":"Electrical Interface"},{"location":"pdr_avhw/#cis_5","text":"Microcontroller Radio Backend Radio Front End Switching Regulators","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces_5","text":"Backplane - Ethernet Backplane - CAN Backplane - USB Backplane - Power Radio antennas","title":"Interfaces:"},{"location":"pdr_avhw/#balloon-board","text":"","title":"Balloon Board"},{"location":"pdr_avhw/#theory-of-operation_6","text":"Altitude Control The Balloon Board will control the gas regulation portion of the altitude control system. Board will supply the required interfaces and systems to operate a valve used to release helium from the balloon. The valve will be controlled by a servo motor. Balloon Monitoring The Balloon Board will be capable of monitoring internal conditions of the balloon through the use of pressure and temperature sensors. Pressure sensor will be board mounted and have a tap off the balloon plug to allow for local monitoring of the gas pressure, operating under the assumption that pressure is uniform within the balloon. A INSERT TYPE HERE temperature sense will be mounted inside the balloon plug and will have a wiring harness run back to the balloon board where any required filtering/amplification will be performed. Flight Control In the event of an issue requiring flight termination the Balloon Board also includes functionality to operate a nichrome based balloon cutoff. Additionally the valve can be commanded to open up and release all pressure.","title":"Theory of Operation"},{"location":"pdr_avhw/#electrical-interface_6","text":"Major components Microcontroller - STM32F429VET6TR CAN Transceiver - TCAN1051 Power Supplies 12V Power Rail No usage (TBD) 5V Power Rail 1.8V Switching Regulator Sensors CAN Transceiver 1.8V Switching Regulator Sensors Servo Control Connectors There is one 10 pin JST PH shrouded right angle connector providing all interfaces to and from the Balloon Board to the Backplane and Main Flight Computer. Backplane Connector JST Part #: S10B-PH-K-S(LF)(SN) Reference view for pinout of connector is from FRONT of card.","title":"Electrical Interface"},{"location":"pdr_avhw/#cis_6","text":"Microcontroller Balloon Monitoring Gas Relief System Switching Regulators","title":"CI\u2019s:"},{"location":"pdr_avhw/#interfaces_6","text":"Backplane - CAN Backplane - Power Gas Relief System","title":"Interfaces:"},{"location":"pdr_avsw/","text":"Flight Avionics Software Lead: Austin Bodzas Jump to: Main Flight Computer Avionics Sensor Card Balloon Board Altitude Control/Dynamics Card Power Board Verification Plans Risk Assessment Cost Overview : The scope of this PDR covers all software running onboard the HAB. The flight software contains all of the instructions for capturing data, logging data, actuating the servos, controlling comms and commanding cut-down. Above is the system level interface diagram for the HAB's Flight Software board level components. The PDR will detail software executing on the Balloon Board, Power Supply Card, Avionics Sensor Card, and Main Flight Computer (MFC). The Communications card does not require custom new software, and the Ground Computer System Main Flight Computer Software Design Overview The Main Flight Computer software is all software that runs on the Main Flight Computer (sometimes referenced as the processor on the main avionics board). At a high level, it is this software that serves as the main brain on the HAB. Interfaces CAN: IO board telemetry and commands Ethernet: Ground telemetry and commands, SSH USB: Connection to SDR for telemetry and commands Responsibilities Handling commands from the ground Telemetering out mission data Logging mission data Receiving data from IO boards Sending commands to IO boards Running control application(s) Monitoring health of the system Runtime Environment Since we are running on the same processor as a beaglebone, we can use RT Linux (PREEMPT_RT). Great, this gives us a great environment to develop applications in. We can ssh easily into the boards, have a file system, and it\u2019s widely used. Applications are unique binaries, so we can test a flight binary control application in isolation against a plant model. At the time of writing I am decently unfamiliar with actually writing applications for RT linux. My understanding is that an application needs to be written within a pthread, so languages like C/C++ are safe. I\u2019m sure upon further investigation we can see if other languages like Rust allow for easy pthread creation. IPC : For communication between applications, Unix socket datagrams will be used. As of PDR, this has not been flushed out further. How these sockets are managed, the datagram format, and the communication model (PubSub) has not been chosen. Applications Altitude Controller This is a payload application that runs a control loop for maintaining the HAB\u2019s altitude. This application will consume sensor data from the Altitude Control IO card to feed the control loop. Commands will then be produced and sent out back to the Altitude Control IO card. System Monitor Analyzing health of the full craft and the MFC. Tracks tx/rx counters for CAN bus messages between MFC and other cards Tracks resource utilization Performs geofencing checks, informs System Manager (belongs as it\u2019s monitoring it\u2019s situation) Determines remaining helium (if not in control app?), useful to report to ground Determines world time using GPS data System Manager The boss of HAB that dictates the state and actions of the HAB bus to support payloads. (Note: commanding of payload actuators are left up to payload control applications). Manages the power board (sending commands to do whatever it does) Manages/Dictates the \u201cstate\u201d of the flight \u2192 ties into apps changing tlm frequencies and such? Responds to ground commands Commands cutdown of balloon Arms/disarms the HAB (dictating that commands to actuators won\u2019t be sent out or acted upon) Logger Logs data to non-volatile persistent memory for post-flight consumption. Logs avionics system status data (battery data, IO metrics, # of faults, flight state, time of flight, ascent rate) Logs payload data altitude control (ascent rate, time since active, predicted correction value {helium}, valve open time, predicted correction value {ballast}, time ballast cap open) dynamics data (3 IMUs, 4 pressure sensors, Loadcell, timestamp for each data point, altitude for each datapoint, GPS for each datapoint) Logs avionics sensor data (sensors on the avionics sensor card such as: GPS, altitude/pressure, temperature, IMU) Future Scope: Dynamically change data logging rates depending on the HAB flight state CAN TLM RX Handle processing of incoming CAN messages Publish data to IPC Monitor and report RX metrics CAN TLM TX Ingest data from IPC Format and transmit CAN messages to their destination ETH TLM RX Handle the processing of incoming network packets Publish data to IPC Monitor and report RX matrix ETH TLM TX Ingest data from IPC Format and transmit network messages to their destinations GNU Radio App Ingest data from IPC to transmit over USB to the SDR Post data from SDR received by USB to the IPC Avionics Sensor Card Software Design Overview The Avionics Sensor Card software is all software that runs on the Avionics Sensor Card MCU . At a high level, the software on this card streams down generic sensor telemetry to the MFC. Interfaces CAN: Telemetry and Commands with the MFC I2C/SPI: Reading from sensors Responsibilities Send IMU, GPS, Temperature, and Pressure sensor data to the MFC Drive the Recovery assist system Runtime Environment Bare Metal The tasks performed by this card are so simple. A simple while loop hooked up to a simple block on a periodic clock should suffice. Balloon Board Software Design Overview The Balloon Board software is all software that runs on the Balloon Board MCU . The Balloon Board software 's primary tasks are streaming down Balloon sensor data, and acting upon commands for the relief controller. Interfaces CAN: Telemetry and Commands with the MFC I2C/SPI: Reading from sensors PWM: Commanding actuators Responsibilities Read IMU, Temperature, and Pressure sensor data from peripherals, transform to usable units, and telemeter to the MFC Drive the gas relief system in response to commands from the MFC Perform Cut Down in response to commands from the MFC Runtime Environment Bare Metal The tasks performed by this card are so simple. A simple while loop hooked up to a simple block on a periodic clock should suffice. Design The Balloon board needs to receive commands from the MFC in order to command the servo valve on the balloon. Arm Command : The software loop sets the arm flag to the boolean value received from the MFC. The arm flag will be boolean, with true indicating that the servo valve power should be activated. A value of true will result in a GPIO line being held high to command a MOSFET to connect power to the servo valves. False will result in holding this GPIO line low. Valve Command - This command is received as a percentage. This percentage is interpreted by the balloon board as the duration percentage of a [5] second duty cycle that the valve should be fully open. Only the last command is accepted per duty cycle, and acted upon for the next cycle. All other subsequent packets are discarded. Altitude Control/Dynamics Card Software Design Overview The Altitude Control/Dynamics Card Software reports sensors relevant to these payloads, along with commanding the ballast actuator. This board software-wise looks near identical to the balloon board in design. It abstractly has sensors, actuators. It reports telemetry from these sensors, and acts upon MFC commands to drive actuators. Refer to the Balloon Board section for more information. Interfaces CAN: MFC commands/telemetry I2C/SPI: Sensors PWM: Ballast Actuator Responsibilities Report Sensor data to MFC Drive the Ballast Actuator in response to commands from the MFC Maintain a safe state per commands from the MFC Environment Bare Metal The tasks performed by this card are so simple. A simple while loop hooked up to a simple block on a periodic clock should suffice. Power Board Software Design Overview The power boards main job is to provide smooth regulated power to the rest of the HAB across 2 rails, 5V and 12V. The power board is also tasked with monitoring the conditions of said rails, and reporting the voltage and current draw from each to the main fight computer. The final task attributed to the power board is battery management. The board is in charge of charging, and monitoring the voltage in the batteries. Interfaces CAN: MFC commands/telemetry I2C: BQ76920 (Battery monitor) I2C: LTC4015 (Charger Controller) Responsibilities Configure BQ76920 to the minimum allowable voltage upon initialization Configure BQ76920 to maximum allowable voltage upon initialization Configure BQ76920 to overcurrent value Read individual cell voltages from BQ76920, report pack voltage to MFC Read pack temperature from BQ76920, report to MFC Configure charger temperature LTC4015 with input current upon initialization Report charger temperature from LTC4015 to the MFC Read coulomb count from LTC4015, and report to MFC Report low battery flag when low on battery based off coulomb count to the MFC** Report voltages of 5V and 12V rails to the MFC Report currents of 5V and 12V rails to the MFC Report board [thermistor] temperature reading to MFC Environment Bare Metal : The tasks performed by this card are simple. A simple while loop blocking on a periodic clock should suffice. Some hardware configuration needs to occur during an initialization period. Verification Plans The software verification strategy will be pretty low on the rigorous side; the set of test cases for each verification level will not be close to exhaustive. However, tests should be done to minimize risk and uncertainty of the system. The HAB software will be tested at three different levels: System, Board, and Application where applicable. System Level Refer to the Simulation & Test PDR for more system level testing information. Verify at the fully avionics system level that the HAB avionics software is performing it\u2019s required behavior. This will be tricky to perform on a shoestring budget, not allowing for mocking out sensors. The extent of this testing may be testing the HAB\u2019s response to stimulus other than the sensors. This could be testing the ground state while still connected to the ground system, testing a timed cutoff, or other timed behaviors. There is the possibility of testing with a verification control application instead of the control application, but the value of this still needs to be evaluated. Board Level Test each board at it's interface. For MFC this would involve stimulating the ETH/CAN interfaces, and observing the output over the same interfaces. The other MCU boards are trickier. Their CAN bus can be easily stimulated/inspected, but behavior of the actuators/sensors is tricker to control and inspect. More test harnessing would be involved, but perhaps already accomplished to meet system level testing. MFC App Level Testing The MFC is running a full operating system, which in turn executes discrete applications. These applications can be tested individually for proper behavior. A Software in the Loop test environment can be created to allow for focused inspected on each of these apps. Unit Testing frameworks can also be used to verify behavior. Risk Assessment Hazard Identification, Analysis, Mitigation The largest risk we face with this HAB is lack of redundancy. Some individual faults can render the whole Avionics system inoperable. The solution to this could be adding multiple strings, have redundant cards, and use voting. This however does not meet the vague requirements for this mission to be light and affordable for a non-profit group. No real analysis has been done at the time of PDR at exactly how likely we are to expect any of these faults. There is reasonable expectation that the failure risk is low enough to still fly this mission with just one string of avionics. Below will touch upon a few of these lack of redundancy risks among other avionics software risks. Each risk is accompanied with a probability (1-3, 1 least likely) and a severity of the risk (1-3, 1 least probelematic). MFC Failure (Prob=1, Sev=3): If an MFC failure occurs, rendering the board inoperable, the Avionics will temporarily fail. If this failure is not recoverable, the avionics system will be left inoperable for the rest of the mission. This failure would most likely occur from hardware being damaged due to atmospheric elements. Some level of mitigation such as using an onboard watchdog may allow the board to reboot and try again. Actuator Card Failure (Prob=1, Sev=2): The cards driving the ballast or balloon valve actuators might fail in an undesired state. This may cause for unsafe conditions by fully emptying the ballast or balloon at an inappropriate time. The mission might uncontrollably be extended or shortened. Watchdogs could be used to attempt to restart these boards, but are not guaranteed to work if the hardware is permanently damaged. MFC Real Time Failure (Prob=1 Sev=1): The MFC slips on meeting it\u2019s required timely behavior. This may be slipping on transmitting a message on time, or not reacting to a control change fast enough. A lack of real time behavior in these areas will cause for a lack of control performance. But given the MFC is using an application processor that far passes our needs, this is not a likely outcome, and not a frequent one if that. Cost $0, expecting to strictly use \u201cfree as in beer\u201d software. But for developing pre-hardware release, devboards will be used. $65 for the Beaglebone Black and $25 for a STM32F4 dev board for a total of $90 . Schedule Common Work Item Time Needed Due Date Create ICDs between boards 1 mo 2020/10/01 Setup Common MCU SW Framework 1.5 mo 2020/10/14 Control App Testing Environment 1 mo 2020/11/01 Software Integration Testing 2 mo 2021/03/01 Hardware Integration Testing 2 mo 2021/05/01 MFC Work Item Time Needed Due Date Linux Application Environment 1 mo 2020/10/01 System Manager App 1.5mo 2020/11/14 RX Apps 1 mo 2020/11/01 TX Apps 1 mo 2020/12/01 Control App Integration 1 mo 2021/01/01 System Monitor App 1.5 mo 2021/01/01 MCU Cards Work Item Time Needed Due Date Avionics Sensor Card loop 1 mo 2020/12/01 Altitude Control/Dynamics Sensor card 1 mo 2020/12/01 Balloon Board loop 1 mo 2021/01/01 Power Board loop 1 mo 2021/02/01","title":"Flight Avionics Software"},{"location":"pdr_avsw/#flight-avionics-software","text":"Lead: Austin Bodzas Jump to: Main Flight Computer Avionics Sensor Card Balloon Board Altitude Control/Dynamics Card Power Board Verification Plans Risk Assessment Cost Overview : The scope of this PDR covers all software running onboard the HAB. The flight software contains all of the instructions for capturing data, logging data, actuating the servos, controlling comms and commanding cut-down. Above is the system level interface diagram for the HAB's Flight Software board level components. The PDR will detail software executing on the Balloon Board, Power Supply Card, Avionics Sensor Card, and Main Flight Computer (MFC). The Communications card does not require custom new software, and the Ground Computer System","title":"Flight Avionics Software"},{"location":"pdr_avsw/#main-flight-computer-software-design","text":"","title":"Main Flight Computer Software Design"},{"location":"pdr_avsw/#overview","text":"The Main Flight Computer software is all software that runs on the Main Flight Computer (sometimes referenced as the processor on the main avionics board). At a high level, it is this software that serves as the main brain on the HAB.","title":"Overview"},{"location":"pdr_avsw/#interfaces","text":"CAN: IO board telemetry and commands Ethernet: Ground telemetry and commands, SSH USB: Connection to SDR for telemetry and commands","title":"Interfaces"},{"location":"pdr_avsw/#responsibilities","text":"Handling commands from the ground Telemetering out mission data Logging mission data Receiving data from IO boards Sending commands to IO boards Running control application(s) Monitoring health of the system","title":"Responsibilities"},{"location":"pdr_avsw/#runtime-environment","text":"Since we are running on the same processor as a beaglebone, we can use RT Linux (PREEMPT_RT). Great, this gives us a great environment to develop applications in. We can ssh easily into the boards, have a file system, and it\u2019s widely used. Applications are unique binaries, so we can test a flight binary control application in isolation against a plant model. At the time of writing I am decently unfamiliar with actually writing applications for RT linux. My understanding is that an application needs to be written within a pthread, so languages like C/C++ are safe. I\u2019m sure upon further investigation we can see if other languages like Rust allow for easy pthread creation. IPC : For communication between applications, Unix socket datagrams will be used. As of PDR, this has not been flushed out further. How these sockets are managed, the datagram format, and the communication model (PubSub) has not been chosen.","title":"Runtime Environment"},{"location":"pdr_avsw/#applications","text":"","title":"Applications"},{"location":"pdr_avsw/#altitude-controller","text":"This is a payload application that runs a control loop for maintaining the HAB\u2019s altitude. This application will consume sensor data from the Altitude Control IO card to feed the control loop. Commands will then be produced and sent out back to the Altitude Control IO card.","title":"Altitude Controller"},{"location":"pdr_avsw/#system-monitor","text":"Analyzing health of the full craft and the MFC. Tracks tx/rx counters for CAN bus messages between MFC and other cards Tracks resource utilization Performs geofencing checks, informs System Manager (belongs as it\u2019s monitoring it\u2019s situation) Determines remaining helium (if not in control app?), useful to report to ground Determines world time using GPS data","title":"System Monitor"},{"location":"pdr_avsw/#system-manager","text":"The boss of HAB that dictates the state and actions of the HAB bus to support payloads. (Note: commanding of payload actuators are left up to payload control applications). Manages the power board (sending commands to do whatever it does) Manages/Dictates the \u201cstate\u201d of the flight \u2192 ties into apps changing tlm frequencies and such? Responds to ground commands Commands cutdown of balloon Arms/disarms the HAB (dictating that commands to actuators won\u2019t be sent out or acted upon)","title":"System Manager"},{"location":"pdr_avsw/#logger","text":"Logs data to non-volatile persistent memory for post-flight consumption. Logs avionics system status data (battery data, IO metrics, # of faults, flight state, time of flight, ascent rate) Logs payload data altitude control (ascent rate, time since active, predicted correction value {helium}, valve open time, predicted correction value {ballast}, time ballast cap open) dynamics data (3 IMUs, 4 pressure sensors, Loadcell, timestamp for each data point, altitude for each datapoint, GPS for each datapoint) Logs avionics sensor data (sensors on the avionics sensor card such as: GPS, altitude/pressure, temperature, IMU) Future Scope: Dynamically change data logging rates depending on the HAB flight state","title":"Logger"},{"location":"pdr_avsw/#can-tlm-rx","text":"Handle processing of incoming CAN messages Publish data to IPC Monitor and report RX metrics","title":"CAN TLM RX"},{"location":"pdr_avsw/#can-tlm-tx","text":"Ingest data from IPC Format and transmit CAN messages to their destination","title":"CAN TLM TX"},{"location":"pdr_avsw/#eth-tlm-rx","text":"Handle the processing of incoming network packets Publish data to IPC Monitor and report RX matrix","title":"ETH TLM RX"},{"location":"pdr_avsw/#eth-tlm-tx","text":"Ingest data from IPC Format and transmit network messages to their destinations","title":"ETH TLM TX"},{"location":"pdr_avsw/#gnu-radio-app","text":"Ingest data from IPC to transmit over USB to the SDR Post data from SDR received by USB to the IPC","title":"GNU Radio App"},{"location":"pdr_avsw/#avionics-sensor-card-software-design","text":"","title":"Avionics Sensor Card Software Design"},{"location":"pdr_avsw/#overview_1","text":"The Avionics Sensor Card software is all software that runs on the Avionics Sensor Card MCU . At a high level, the software on this card streams down generic sensor telemetry to the MFC.","title":"Overview"},{"location":"pdr_avsw/#interfaces_1","text":"CAN: Telemetry and Commands with the MFC I2C/SPI: Reading from sensors","title":"Interfaces"},{"location":"pdr_avsw/#responsibilities_1","text":"Send IMU, GPS, Temperature, and Pressure sensor data to the MFC Drive the Recovery assist system","title":"Responsibilities"},{"location":"pdr_avsw/#runtime-environment_1","text":"Bare Metal The tasks performed by this card are so simple. A simple while loop hooked up to a simple block on a periodic clock should suffice.","title":"Runtime Environment"},{"location":"pdr_avsw/#balloon-board-software-design","text":"","title":"Balloon Board Software Design"},{"location":"pdr_avsw/#overview_2","text":"The Balloon Board software is all software that runs on the Balloon Board MCU . The Balloon Board software 's primary tasks are streaming down Balloon sensor data, and acting upon commands for the relief controller.","title":"Overview"},{"location":"pdr_avsw/#interfaces_2","text":"CAN: Telemetry and Commands with the MFC I2C/SPI: Reading from sensors PWM: Commanding actuators","title":"Interfaces"},{"location":"pdr_avsw/#responsibilities_2","text":"Read IMU, Temperature, and Pressure sensor data from peripherals, transform to usable units, and telemeter to the MFC Drive the gas relief system in response to commands from the MFC Perform Cut Down in response to commands from the MFC","title":"Responsibilities"},{"location":"pdr_avsw/#runtime-environment_2","text":"Bare Metal The tasks performed by this card are so simple. A simple while loop hooked up to a simple block on a periodic clock should suffice.","title":"Runtime Environment"},{"location":"pdr_avsw/#design","text":"The Balloon board needs to receive commands from the MFC in order to command the servo valve on the balloon. Arm Command : The software loop sets the arm flag to the boolean value received from the MFC. The arm flag will be boolean, with true indicating that the servo valve power should be activated. A value of true will result in a GPIO line being held high to command a MOSFET to connect power to the servo valves. False will result in holding this GPIO line low. Valve Command - This command is received as a percentage. This percentage is interpreted by the balloon board as the duration percentage of a [5] second duty cycle that the valve should be fully open. Only the last command is accepted per duty cycle, and acted upon for the next cycle. All other subsequent packets are discarded.","title":"Design"},{"location":"pdr_avsw/#altitude-controldynamics-card-software-design","text":"","title":"Altitude Control/Dynamics Card Software Design"},{"location":"pdr_avsw/#overview_3","text":"The Altitude Control/Dynamics Card Software reports sensors relevant to these payloads, along with commanding the ballast actuator. This board software-wise looks near identical to the balloon board in design. It abstractly has sensors, actuators. It reports telemetry from these sensors, and acts upon MFC commands to drive actuators. Refer to the Balloon Board section for more information.","title":"Overview"},{"location":"pdr_avsw/#interfaces_3","text":"CAN: MFC commands/telemetry I2C/SPI: Sensors PWM: Ballast Actuator","title":"Interfaces"},{"location":"pdr_avsw/#responsibilities_3","text":"Report Sensor data to MFC Drive the Ballast Actuator in response to commands from the MFC Maintain a safe state per commands from the MFC","title":"Responsibilities"},{"location":"pdr_avsw/#environment","text":"Bare Metal The tasks performed by this card are so simple. A simple while loop hooked up to a simple block on a periodic clock should suffice.","title":"Environment"},{"location":"pdr_avsw/#power-board-software-design","text":"","title":"Power Board Software Design"},{"location":"pdr_avsw/#overview_4","text":"The power boards main job is to provide smooth regulated power to the rest of the HAB across 2 rails, 5V and 12V. The power board is also tasked with monitoring the conditions of said rails, and reporting the voltage and current draw from each to the main fight computer. The final task attributed to the power board is battery management. The board is in charge of charging, and monitoring the voltage in the batteries.","title":"Overview"},{"location":"pdr_avsw/#interfaces_4","text":"CAN: MFC commands/telemetry I2C: BQ76920 (Battery monitor) I2C: LTC4015 (Charger Controller)","title":"Interfaces"},{"location":"pdr_avsw/#responsibilities_4","text":"Configure BQ76920 to the minimum allowable voltage upon initialization Configure BQ76920 to maximum allowable voltage upon initialization Configure BQ76920 to overcurrent value Read individual cell voltages from BQ76920, report pack voltage to MFC Read pack temperature from BQ76920, report to MFC Configure charger temperature LTC4015 with input current upon initialization Report charger temperature from LTC4015 to the MFC Read coulomb count from LTC4015, and report to MFC Report low battery flag when low on battery based off coulomb count to the MFC** Report voltages of 5V and 12V rails to the MFC Report currents of 5V and 12V rails to the MFC Report board [thermistor] temperature reading to MFC","title":"Responsibilities"},{"location":"pdr_avsw/#environment_1","text":"Bare Metal : The tasks performed by this card are simple. A simple while loop blocking on a periodic clock should suffice. Some hardware configuration needs to occur during an initialization period.","title":"Environment"},{"location":"pdr_avsw/#verification-plans","text":"The software verification strategy will be pretty low on the rigorous side; the set of test cases for each verification level will not be close to exhaustive. However, tests should be done to minimize risk and uncertainty of the system. The HAB software will be tested at three different levels: System, Board, and Application where applicable.","title":"Verification Plans"},{"location":"pdr_avsw/#system-level","text":"Refer to the Simulation & Test PDR for more system level testing information. Verify at the fully avionics system level that the HAB avionics software is performing it\u2019s required behavior. This will be tricky to perform on a shoestring budget, not allowing for mocking out sensors. The extent of this testing may be testing the HAB\u2019s response to stimulus other than the sensors. This could be testing the ground state while still connected to the ground system, testing a timed cutoff, or other timed behaviors. There is the possibility of testing with a verification control application instead of the control application, but the value of this still needs to be evaluated.","title":"System Level"},{"location":"pdr_avsw/#board-level","text":"Test each board at it's interface. For MFC this would involve stimulating the ETH/CAN interfaces, and observing the output over the same interfaces. The other MCU boards are trickier. Their CAN bus can be easily stimulated/inspected, but behavior of the actuators/sensors is tricker to control and inspect. More test harnessing would be involved, but perhaps already accomplished to meet system level testing.","title":"Board Level"},{"location":"pdr_avsw/#mfc-app-level-testing","text":"The MFC is running a full operating system, which in turn executes discrete applications. These applications can be tested individually for proper behavior. A Software in the Loop test environment can be created to allow for focused inspected on each of these apps. Unit Testing frameworks can also be used to verify behavior.","title":"MFC App Level Testing"},{"location":"pdr_avsw/#risk-assessment","text":"","title":"Risk Assessment"},{"location":"pdr_avsw/#hazard-identification-analysis-mitigation","text":"The largest risk we face with this HAB is lack of redundancy. Some individual faults can render the whole Avionics system inoperable. The solution to this could be adding multiple strings, have redundant cards, and use voting. This however does not meet the vague requirements for this mission to be light and affordable for a non-profit group. No real analysis has been done at the time of PDR at exactly how likely we are to expect any of these faults. There is reasonable expectation that the failure risk is low enough to still fly this mission with just one string of avionics. Below will touch upon a few of these lack of redundancy risks among other avionics software risks. Each risk is accompanied with a probability (1-3, 1 least likely) and a severity of the risk (1-3, 1 least probelematic). MFC Failure (Prob=1, Sev=3): If an MFC failure occurs, rendering the board inoperable, the Avionics will temporarily fail. If this failure is not recoverable, the avionics system will be left inoperable for the rest of the mission. This failure would most likely occur from hardware being damaged due to atmospheric elements. Some level of mitigation such as using an onboard watchdog may allow the board to reboot and try again. Actuator Card Failure (Prob=1, Sev=2): The cards driving the ballast or balloon valve actuators might fail in an undesired state. This may cause for unsafe conditions by fully emptying the ballast or balloon at an inappropriate time. The mission might uncontrollably be extended or shortened. Watchdogs could be used to attempt to restart these boards, but are not guaranteed to work if the hardware is permanently damaged. MFC Real Time Failure (Prob=1 Sev=1): The MFC slips on meeting it\u2019s required timely behavior. This may be slipping on transmitting a message on time, or not reacting to a control change fast enough. A lack of real time behavior in these areas will cause for a lack of control performance. But given the MFC is using an application processor that far passes our needs, this is not a likely outcome, and not a frequent one if that.","title":"Hazard Identification, Analysis, Mitigation"},{"location":"pdr_avsw/#cost","text":"$0, expecting to strictly use \u201cfree as in beer\u201d software. But for developing pre-hardware release, devboards will be used. $65 for the Beaglebone Black and $25 for a STM32F4 dev board for a total of $90 .","title":"Cost"},{"location":"pdr_avsw/#schedule","text":"","title":"Schedule"},{"location":"pdr_avsw/#common-work","text":"Item Time Needed Due Date Create ICDs between boards 1 mo 2020/10/01 Setup Common MCU SW Framework 1.5 mo 2020/10/14 Control App Testing Environment 1 mo 2020/11/01 Software Integration Testing 2 mo 2021/03/01 Hardware Integration Testing 2 mo 2021/05/01","title":"Common Work"},{"location":"pdr_avsw/#mfc-work","text":"Item Time Needed Due Date Linux Application Environment 1 mo 2020/10/01 System Manager App 1.5mo 2020/11/14 RX Apps 1 mo 2020/11/01 TX Apps 1 mo 2020/12/01 Control App Integration 1 mo 2021/01/01 System Monitor App 1.5 mo 2021/01/01","title":"MFC Work"},{"location":"pdr_avsw/#mcu-cards-work","text":"Item Time Needed Due Date Avionics Sensor Card loop 1 mo 2020/12/01 Altitude Control/Dynamics Sensor card 1 mo 2020/12/01 Balloon Board loop 1 mo 2021/01/01 Power Board loop 1 mo 2021/02/01","title":"MCU Cards Work"},{"location":"pdr_mission-profile/","text":"Flight Profile Payload Mass < 3kg Maximum run time 10 hours Flight ceiling 100,000 ft Target altitude hold at 80,000 ft +/- 500 ft for at least 1 hour Real-time telemetry downlink up to 50 mile slant range (Stretch) Real-time imagery downlink up to 25 mile slant range (Stretch) Portable telemetry monitor module and UI for remote ops and chase car","title":"Mission Profile"},{"location":"pdr_mission-profile/#flight-profile","text":"Payload Mass < 3kg Maximum run time 10 hours Flight ceiling 100,000 ft Target altitude hold at 80,000 ft +/- 500 ft for at least 1 hour Real-time telemetry downlink up to 50 mile slant range (Stretch) Real-time imagery downlink up to 25 mile slant range (Stretch) Portable telemetry monitor module and UI for remote ops and chase car","title":"Flight Profile"},{"location":"placeholder/","text":"Placeholder! Whoops! You found a placeholder! Eventually this link will be replaced by something worth looking at. If you were expecting something to be here, make an issue on Jira or GitHub to let us know.","title":"Balloon Board"},{"location":"placeholder/#placeholder","text":"Whoops! You found a placeholder! Eventually this link will be replaced by something worth looking at. If you were expecting something to be here, make an issue on Jira or GitHub to let us know.","title":"Placeholder!"}]}